;; Generated by gen_cl.py -- part of cl-sokol https://github.com/takeiteasy/cl-sokol
;; The MIT License (MIT)
;; 
;; Copyright (c) 2023 George Watson
;; 
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;; 
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;; 
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


(in-package #:cl-sokol-args)

(pushnew (asdf:system-relative-pathname :cl-sokol-args "build/") *foreign-library-directories*)
(define-foreign-library libsokol-args
  (t (:default "libsokol-args")))
(unless (foreign-library-loaded-p 'libsokol-args)
  (use-foreign-library libsokol-args))

(defcstruct (allocator :size 192)
	(alloc-fn :offset 0 :size 64 (:pointer :void))
	(free-fn :offset 64 :size 64 (:pointer :void))
	(user-data :offset 128 :size 64 (:pointer :void))
(defcstruct (desc :size 384)
	(argc :offset 0 :size 32 :int)
	(argv :offset 64 :size 64 (:pointer (:pointer :char)))
	(max-args :offset 128 :size 32 :int)
	(buf-size :offset 160 :size 32 :int)
	(allocator :offset 192 :size 192 (:struct allocator))
(defcfun (setup "sargs_setup") :void
	(desc (:pointer (:struct desc))))
(defcfun (shutdown "sargs_shutdown") :void)
(defcfun (isvalid "sargs_isvalid") :boolean)
(defcfun (exists "sargs_exists") :boolean
	(key (:pointer :char)))
(defcfun (value "sargs_value") (:pointer :char)
	(key (:pointer :char)))
(defcfun (value-def "sargs_value_def") (:pointer :char)
	(key (:pointer :char))
	(def (:pointer :char)))
(defcfun (equals "sargs_equals") :boolean
	(key (:pointer :char))
	(val (:pointer :char)))
(defcfun (boolean "sargs_boolean") :boolean
	(key (:pointer :char)))
(defcfun (find "sargs_find") :int
	(key (:pointer :char)))
(defcfun (num-args "sargs_num_args") :int)
(defcfun (key-at "sargs_key_at") (:pointer :char)
	(index :int))
(defcfun (value-at "sargs_value_at") (:pointer :char)
	(index :int))
