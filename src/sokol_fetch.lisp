;; Generated by gen_cl.py -- part of cl-sokol https://github.com/takeiteasy/cl-sokol
;; The MIT License (MIT)
;; 
;; Copyright (c) 2023 George Watson
;; 
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;; 
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;; 
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


(in-package #:cl-sokol-fetch)

(pushnew (asdf:system-relative-pathname :cl-sokol-fetch "build/") *foreign-library-directories*)
(define-foreign-library libsokol-fetch
  (t (:default "libsokol_fetch")))
(unless (foreign-library-loaded-p 'libsokol-fetch)
  (use-foreign-library libsokol-fetch))

(defcenum log-item-t
	(:LOGITEM-OK 0)
	(:LOGITEM-MALLOC-FAILED 1)
	(:LOGITEM-FILE-PATH-UTF8-DECODING-FAILED 2)
	(:LOGITEM-SEND-QUEUE-FULL 3)
	(:LOGITEM-REQUEST-CHANNEL-INDEX-TOO-BIG 4)
	(:LOGITEM-REQUEST-PATH-IS-NULL 5)
	(:LOGITEM-REQUEST-PATH-TOO-LONG 6)
	(:LOGITEM-REQUEST-CALLBACK-MISSING 7)
	(:LOGITEM-REQUEST-CHUNK-SIZE-GREATER-BUFFER-SIZE 8)
	(:LOGITEM-REQUEST-USERDATA-PTR-IS-SET-BUT-USERDATA-SIZE-IS-NULL 9)
	(:LOGITEM-REQUEST-USERDATA-PTR-IS-NULL-BUT-USERDATA-SIZE-IS-NOT 10)
	(:LOGITEM-REQUEST-USERDATA-SIZE-TOO-BIG 11)
	(:LOGITEM-CLAMPING-NUM-CHANNELS-TO-MAX-CHANNELS 12)
	(:LOGITEM-REQUEST-POOL-EXHAUSTED 13))
(defcenum error-t
	(:ERROR-NO-ERROR 0)
	(:ERROR-FILE-NOT-FOUND 1)
	(:ERROR-NO-BUFFER 2)
	(:ERROR-BUFFER-TOO-SMALL 3)
	(:ERROR-UNEXPECTED-EOF 4)
	(:ERROR-INVALID-HTTP-STATUS 5)
	(:ERROR-CANCELLED 6))
(defcstruct (logger-t :size 128)
	(func :offset 0 :size 64 (:pointer :void))
	(user-data :offset 64 :size 64 (:pointer :void)))
(defcstruct (range-t :size 128)
	(ptr :offset 0 :size 64 (:pointer :void))
	(size :offset 64 :size 64 size_t))
(defcstruct (allocator-t :size 192)
	(alloc-fn :offset 0 :size 64 (:pointer :void))
	(free-fn :offset 64 :size 64 (:pointer :void))
	(user-data :offset 128 :size 64 (:pointer :void)))
(defcstruct (desc-t :size 448)
	(max-requests :offset 0 :size 32 :uint32)
	(num-channels :offset 32 :size 32 :uint32)
	(num-lanes :offset 64 :size 32 :uint32)
	(allocator :offset 128 :size 192 (:struct allocator-t))
	(logger :offset 320 :size 128 (:struct logger-t)))
(defcstruct (handle-t :size 32)
	(id :offset 0 :size 32 :uint32))
(defcstruct (response-t :size 640)
	(handle :offset 0 :size 32 (:struct handle-t))
	(dispatched :offset 32 :size 8 :boolean)
	(fetched :offset 40 :size 8 :boolean)
	(paused :offset 48 :size 8 :boolean)
	(finished :offset 56 :size 8 :boolean)
	(failed :offset 64 :size 8 :boolean)
	(cancelled :offset 72 :size 8 :boolean)
	(error-code :offset 96 :size 32 (:struct error-t))
	(channel :offset 128 :size 32 :uint32)
	(lane :offset 160 :size 32 :uint32)
	(path :offset 192 :size 64 (:pointer :char))
	(user-data :offset 256 :size 64 (:pointer :void))
	(data-offset :offset 320 :size 32 :uint32)
	(data :offset 384 :size 128 (:struct range-t))
	(buffer :offset 512 :size 128 (:struct range-t)))
(defcstruct (request-t :size 512)
	(channel :offset 0 :size 32 :uint32)
	(path :offset 64 :size 64 (:pointer :char))
	(callback :offset 128 :size 64 (:pointer :void))
	(chunk-size :offset 192 :size 32 :uint32)
	(buffer :offset 256 :size 128 (:struct range-t))
	(user-data :offset 384 :size 128 (:struct range-t)))
(defcfun (setup "sfetch_setup") :void
	(desc (:pointer (:struct desc-t))))
(defcfun (shutdown "sfetch_shutdown") :void)
(defcfun (valid "sfetch_valid") :boolean)
(defcfun (desc "sfetch_desc_cl") (:pointer (:struct desc-t)))
(defcfun (max-userdata-bytes "sfetch_max_userdata_bytes") :int)
(defcfun (max-path "sfetch_max_path") :int)
(defcfun (send "sfetch_send_cl") (:pointer (:struct handle-t))
	(request (:pointer (:struct request-t))))
(defcfun (handle-valid "sfetch_handle_valid_cl") :boolean
	(h (:pointer (:struct handle-t))))
(defcfun (dowork "sfetch_dowork") :void)
(defcfun (bind-buffer "sfetch_bind_buffer_cl") :void
	(h (:pointer (:struct handle-t)))
	(buffer (:pointer (:struct range-t))))
(defcfun (unbind-buffer "sfetch_unbind_buffer_cl") (:pointer :void)
	(h (:pointer (:struct handle-t))))
(defcfun (cancel "sfetch_cancel_cl") :void
	(h (:pointer (:struct handle-t))))
(defcfun (pause "sfetch_pause_cl") :void
	(h (:pointer (:struct handle-t))))
(defcfun (continue "sfetch_continue_cl") :void
	(h (:pointer (:struct handle-t))))
