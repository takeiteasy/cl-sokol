;; Generated by gen_cl.py -- part of cl-sokol https://github.com/takeiteasy/cl-sokol
;; The MIT License (MIT)
;; 
;; Copyright (c) 2023 George Watson
;; 
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;; 
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;; 
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


(in-package #:cl-sokol-gfx)

(pushnew (asdf:system-relative-pathname :cl-sokol-gfx "build/") *foreign-library-directories*)
(define-foreign-library libsokol-gfx
  (t (:default "libsokol_gfx")))
(unless (foreign-library-loaded-p 'libsokol-gfx)
  (use-foreign-library libsokol-gfx))

(defconstant +INVALID-ID+ 0)
(defconstant +NUM-SHADER-STAGES+ 2)
(defconstant +NUM-INFLIGHT-FRAMES+ 2)
(defconstant +MAX-COLOR-ATTACHMENTS+ 4)
(defconstant +MAX-VERTEX-BUFFERS+ 8)
(defconstant +MAX-SHADERSTAGE-IMAGES+ 12)
(defconstant +MAX-SHADERSTAGE-SAMPLERS+ 8)
(defconstant +MAX-SHADERSTAGE-IMAGESAMPLERPAIRS+ 12)
(defconstant +MAX-SHADERSTAGE-STORAGEBUFFERS+ 8)
(defconstant +MAX-SHADERSTAGE-UBS+ 4)
(defconstant +MAX-UB-MEMBERS+ 16)
(defconstant +MAX-VERTEX-ATTRIBUTES+ 16)
(defconstant +MAX-MIPMAPS+ 16)
(defconstant +MAX-TEXTUREARRAY-LAYERS+ 128)
(defcenum backend
	(:BACKEND-GLCORE 0)
	(:BACKEND-GLES3 1)
	(:BACKEND-D3D11 2)
	(:BACKEND-METAL-IOS 3)
	(:BACKEND-METAL-MACOS 4)
	(:BACKEND-METAL-SIMULATOR 5)
	(:BACKEND-WGPU 6)
	(:BACKEND-DUMMY 7))
(defcenum pixel-format
	(:-SG-PIXELFORMAT-DEFAULT 0)
	(:PIXELFORMAT-NONE 1)
	(:PIXELFORMAT-R8 2)
	(:PIXELFORMAT-R8SN 3)
	(:PIXELFORMAT-R8UI 4)
	(:PIXELFORMAT-R8SI 5)
	(:PIXELFORMAT-R16 6)
	(:PIXELFORMAT-R16SN 7)
	(:PIXELFORMAT-R16UI 8)
	(:PIXELFORMAT-R16SI 9)
	(:PIXELFORMAT-R16F 10)
	(:PIXELFORMAT-RG8 11)
	(:PIXELFORMAT-RG8SN 12)
	(:PIXELFORMAT-RG8UI 13)
	(:PIXELFORMAT-RG8SI 14)
	(:PIXELFORMAT-R32UI 15)
	(:PIXELFORMAT-R32SI 16)
	(:PIXELFORMAT-R32F 17)
	(:PIXELFORMAT-RG16 18)
	(:PIXELFORMAT-RG16SN 19)
	(:PIXELFORMAT-RG16UI 20)
	(:PIXELFORMAT-RG16SI 21)
	(:PIXELFORMAT-RG16F 22)
	(:PIXELFORMAT-RGBA8 23)
	(:PIXELFORMAT-SRGB8A8 24)
	(:PIXELFORMAT-RGBA8SN 25)
	(:PIXELFORMAT-RGBA8UI 26)
	(:PIXELFORMAT-RGBA8SI 27)
	(:PIXELFORMAT-BGRA8 28)
	(:PIXELFORMAT-RGB10A2 29)
	(:PIXELFORMAT-RG11B10F 30)
	(:PIXELFORMAT-RGB9E5 31)
	(:PIXELFORMAT-RG32UI 32)
	(:PIXELFORMAT-RG32SI 33)
	(:PIXELFORMAT-RG32F 34)
	(:PIXELFORMAT-RGBA16 35)
	(:PIXELFORMAT-RGBA16SN 36)
	(:PIXELFORMAT-RGBA16UI 37)
	(:PIXELFORMAT-RGBA16SI 38)
	(:PIXELFORMAT-RGBA16F 39)
	(:PIXELFORMAT-RGBA32UI 40)
	(:PIXELFORMAT-RGBA32SI 41)
	(:PIXELFORMAT-RGBA32F 42)
	(:PIXELFORMAT-DEPTH 43)
	(:PIXELFORMAT-DEPTH-STENCIL 44)
	(:PIXELFORMAT-BC1-RGBA 45)
	(:PIXELFORMAT-BC2-RGBA 46)
	(:PIXELFORMAT-BC3-RGBA 47)
	(:PIXELFORMAT-BC3-SRGBA 48)
	(:PIXELFORMAT-BC4-R 49)
	(:PIXELFORMAT-BC4-RSN 50)
	(:PIXELFORMAT-BC5-RG 51)
	(:PIXELFORMAT-BC5-RGSN 52)
	(:PIXELFORMAT-BC6H-RGBF 53)
	(:PIXELFORMAT-BC6H-RGBUF 54)
	(:PIXELFORMAT-BC7-RGBA 55)
	(:PIXELFORMAT-BC7-SRGBA 56)
	(:PIXELFORMAT-PVRTC-RGB-2BPP 57)
	(:PIXELFORMAT-PVRTC-RGB-4BPP 58)
	(:PIXELFORMAT-PVRTC-RGBA-2BPP 59)
	(:PIXELFORMAT-PVRTC-RGBA-4BPP 60)
	(:PIXELFORMAT-ETC2-RGB8 61)
	(:PIXELFORMAT-ETC2-SRGB8 62)
	(:PIXELFORMAT-ETC2-RGB8A1 63)
	(:PIXELFORMAT-ETC2-RGBA8 64)
	(:PIXELFORMAT-ETC2-SRGB8A8 65)
	(:PIXELFORMAT-EAC-R11 66)
	(:PIXELFORMAT-EAC-R11SN 67)
	(:PIXELFORMAT-EAC-RG11 68)
	(:PIXELFORMAT-EAC-RG11SN 69)
	(:PIXELFORMAT-ASTC-4x4-RGBA 70)
	(:PIXELFORMAT-ASTC-4x4-SRGBA 71)
	(:-SG-PIXELFORMAT-NUM 72)
	(:-SG-PIXELFORMAT-FORCE-U32 2147483647))
(defcenum resource-state
	(:RESOURCESTATE-INITIAL 0)
	(:RESOURCESTATE-ALLOC 1)
	(:RESOURCESTATE-VALID 2)
	(:RESOURCESTATE-FAILED 3)
	(:RESOURCESTATE-INVALID 4)
	(:-SG-RESOURCESTATE-FORCE-U32 2147483647))
(defcenum usage
	(:-SG-USAGE-DEFAULT 0)
	(:USAGE-IMMUTABLE 1)
	(:USAGE-DYNAMIC 2)
	(:USAGE-STREAM 3)
	(:-SG-USAGE-NUM 4)
	(:-SG-USAGE-FORCE-U32 2147483647))
(defcenum buffer-type
	(:-SG-BUFFERTYPE-DEFAULT 0)
	(:BUFFERTYPE-VERTEXBUFFER 1)
	(:BUFFERTYPE-INDEXBUFFER 2)
	(:BUFFERTYPE-STORAGEBUFFER 3)
	(:-SG-BUFFERTYPE-NUM 4)
	(:-SG-BUFFERTYPE-FORCE-U32 2147483647))
(defcenum index-type
	(:-SG-INDEXTYPE-DEFAULT 0)
	(:INDEXTYPE-NONE 1)
	(:INDEXTYPE-UINT16 2)
	(:INDEXTYPE-UINT32 3)
	(:-SG-INDEXTYPE-NUM 4)
	(:-SG-INDEXTYPE-FORCE-U32 2147483647))
(defcenum image-type
	(:-SG-IMAGETYPE-DEFAULT 0)
	(:IMAGETYPE-2D 1)
	(:IMAGETYPE-CUBE 2)
	(:IMAGETYPE-3D 3)
	(:IMAGETYPE-ARRAY 4)
	(:-SG-IMAGETYPE-NUM 5)
	(:-SG-IMAGETYPE-FORCE-U32 2147483647))
(defcenum image-sample-type
	(:-SG-IMAGESAMPLETYPE-DEFAULT 0)
	(:IMAGESAMPLETYPE-FLOAT 1)
	(:IMAGESAMPLETYPE-DEPTH 2)
	(:IMAGESAMPLETYPE-SINT 3)
	(:IMAGESAMPLETYPE-UINT 4)
	(:IMAGESAMPLETYPE-UNFILTERABLE-FLOAT 5)
	(:-SG-IMAGESAMPLETYPE-NUM 6)
	(:-SG-IMAGESAMPLETYPE-FORCE-U32 2147483647))
(defcenum sampler-type
	(:-SG-SAMPLERTYPE-DEFAULT 0)
	(:SAMPLERTYPE-FILTERING 1)
	(:SAMPLERTYPE-NONFILTERING 2)
	(:SAMPLERTYPE-COMPARISON 3)
	(:-SG-SAMPLERTYPE-NUM 4)
	(:-SG-SAMPLERTYPE-FORCE-U32 5))
(defcenum cube-face
	(:CUBEFACE-POS-X 0)
	(:CUBEFACE-NEG-X 1)
	(:CUBEFACE-POS-Y 2)
	(:CUBEFACE-NEG-Y 3)
	(:CUBEFACE-POS-Z 4)
	(:CUBEFACE-NEG-Z 5)
	(:CUBEFACE-NUM 6)
	(:-SG-CUBEFACE-FORCE-U32 2147483647))
(defcenum shader-stage
	(:SHADERSTAGE-VS 0)
	(:SHADERSTAGE-FS 1)
	(:-SG-SHADERSTAGE-FORCE-U32 2147483647))
(defcenum primitive-type
	(:-SG-PRIMITIVETYPE-DEFAULT 0)
	(:PRIMITIVETYPE-POINTS 1)
	(:PRIMITIVETYPE-LINES 2)
	(:PRIMITIVETYPE-LINE-STRIP 3)
	(:PRIMITIVETYPE-TRIANGLES 4)
	(:PRIMITIVETYPE-TRIANGLE-STRIP 5)
	(:-SG-PRIMITIVETYPE-NUM 6)
	(:-SG-PRIMITIVETYPE-FORCE-U32 2147483647))
(defcenum filter
	(:-SG-FILTER-DEFAULT 0)
	(:FILTER-NONE 1)
	(:FILTER-NEAREST 2)
	(:FILTER-LINEAR 3)
	(:-SG-FILTER-NUM 4)
	(:-SG-FILTER-FORCE-U32 2147483647))
(defcenum wrap
	(:-SG-WRAP-DEFAULT 0)
	(:WRAP-REPEAT 1)
	(:WRAP-CLAMP-TO-EDGE 2)
	(:WRAP-CLAMP-TO-BORDER 3)
	(:WRAP-MIRRORED-REPEAT 4)
	(:-SG-WRAP-NUM 5)
	(:-SG-WRAP-FORCE-U32 2147483647))
(defcenum border-color
	(:-SG-BORDERCOLOR-DEFAULT 0)
	(:BORDERCOLOR-TRANSPARENT-BLACK 1)
	(:BORDERCOLOR-OPAQUE-BLACK 2)
	(:BORDERCOLOR-OPAQUE-WHITE 3)
	(:-SG-BORDERCOLOR-NUM 4)
	(:-SG-BORDERCOLOR-FORCE-U32 2147483647))
(defcenum vertex-format
	(:VERTEXFORMAT-INVALID 0)
	(:VERTEXFORMAT-FLOAT 1)
	(:VERTEXFORMAT-FLOAT2 2)
	(:VERTEXFORMAT-FLOAT3 3)
	(:VERTEXFORMAT-FLOAT4 4)
	(:VERTEXFORMAT-BYTE4 5)
	(:VERTEXFORMAT-BYTE4N 6)
	(:VERTEXFORMAT-UBYTE4 7)
	(:VERTEXFORMAT-UBYTE4N 8)
	(:VERTEXFORMAT-SHORT2 9)
	(:VERTEXFORMAT-SHORT2N 10)
	(:VERTEXFORMAT-USHORT2N 11)
	(:VERTEXFORMAT-SHORT4 12)
	(:VERTEXFORMAT-SHORT4N 13)
	(:VERTEXFORMAT-USHORT4N 14)
	(:VERTEXFORMAT-UINT10-N2 15)
	(:VERTEXFORMAT-HALF2 16)
	(:VERTEXFORMAT-HALF4 17)
	(:-SG-VERTEXFORMAT-NUM 18)
	(:-SG-VERTEXFORMAT-FORCE-U32 2147483647))
(defcenum vertex-step
	(:-SG-VERTEXSTEP-DEFAULT 0)
	(:VERTEXSTEP-PER-VERTEX 1)
	(:VERTEXSTEP-PER-INSTANCE 2)
	(:-SG-VERTEXSTEP-NUM 3)
	(:-SG-VERTEXSTEP-FORCE-U32 2147483647))
(defcenum uniform-type
	(:UNIFORMTYPE-INVALID 0)
	(:UNIFORMTYPE-FLOAT 1)
	(:UNIFORMTYPE-FLOAT2 2)
	(:UNIFORMTYPE-FLOAT3 3)
	(:UNIFORMTYPE-FLOAT4 4)
	(:UNIFORMTYPE-INT 5)
	(:UNIFORMTYPE-INT2 6)
	(:UNIFORMTYPE-INT3 7)
	(:UNIFORMTYPE-INT4 8)
	(:UNIFORMTYPE-MAT4 9)
	(:-SG-UNIFORMTYPE-NUM 10)
	(:-SG-UNIFORMTYPE-FORCE-U32 2147483647))
(defcenum uniform-layout
	(:-SG-UNIFORMLAYOUT-DEFAULT 0)
	(:UNIFORMLAYOUT-NATIVE 1)
	(:UNIFORMLAYOUT-STD140 2)
	(:-SG-UNIFORMLAYOUT-NUM 3)
	(:-SG-UNIFORMLAYOUT-FORCE-U32 2147483647))
(defcenum cull-mode
	(:-SG-CULLMODE-DEFAULT 0)
	(:CULLMODE-NONE 1)
	(:CULLMODE-FRONT 2)
	(:CULLMODE-BACK 3)
	(:-SG-CULLMODE-NUM 4)
	(:-SG-CULLMODE-FORCE-U32 2147483647))
(defcenum face-winding
	(:-SG-FACEWINDING-DEFAULT 0)
	(:FACEWINDING-CCW 1)
	(:FACEWINDING-CW 2)
	(:-SG-FACEWINDING-NUM 3)
	(:-SG-FACEWINDING-FORCE-U32 2147483647))
(defcenum compare-func
	(:-SG-COMPAREFUNC-DEFAULT 0)
	(:COMPAREFUNC-NEVER 1)
	(:COMPAREFUNC-LESS 2)
	(:COMPAREFUNC-EQUAL 3)
	(:COMPAREFUNC-LESS-EQUAL 4)
	(:COMPAREFUNC-GREATER 5)
	(:COMPAREFUNC-NOT-EQUAL 6)
	(:COMPAREFUNC-GREATER-EQUAL 7)
	(:COMPAREFUNC-ALWAYS 8)
	(:-SG-COMPAREFUNC-NUM 9)
	(:-SG-COMPAREFUNC-FORCE-U32 2147483647))
(defcenum stencil-op
	(:-SG-STENCILOP-DEFAULT 0)
	(:STENCILOP-KEEP 1)
	(:STENCILOP-ZERO 2)
	(:STENCILOP-REPLACE 3)
	(:STENCILOP-INCR-CLAMP 4)
	(:STENCILOP-DECR-CLAMP 5)
	(:STENCILOP-INVERT 6)
	(:STENCILOP-INCR-WRAP 7)
	(:STENCILOP-DECR-WRAP 8)
	(:-SG-STENCILOP-NUM 9)
	(:-SG-STENCILOP-FORCE-U32 2147483647))
(defcenum blend-factor
	(:-SG-BLENDFACTOR-DEFAULT 0)
	(:BLENDFACTOR-ZERO 1)
	(:BLENDFACTOR-ONE 2)
	(:BLENDFACTOR-SRC-COLOR 3)
	(:BLENDFACTOR-ONE-MINUS-SRC-COLOR 4)
	(:BLENDFACTOR-SRC-ALPHA 5)
	(:BLENDFACTOR-ONE-MINUS-SRC-ALPHA 6)
	(:BLENDFACTOR-DST-COLOR 7)
	(:BLENDFACTOR-ONE-MINUS-DST-COLOR 8)
	(:BLENDFACTOR-DST-ALPHA 9)
	(:BLENDFACTOR-ONE-MINUS-DST-ALPHA 10)
	(:BLENDFACTOR-SRC-ALPHA-SATURATED 11)
	(:BLENDFACTOR-BLEND-COLOR 12)
	(:BLENDFACTOR-ONE-MINUS-BLEND-COLOR 13)
	(:BLENDFACTOR-BLEND-ALPHA 14)
	(:BLENDFACTOR-ONE-MINUS-BLEND-ALPHA 15)
	(:-SG-BLENDFACTOR-NUM 16)
	(:-SG-BLENDFACTOR-FORCE-U32 2147483647))
(defcenum blend-op
	(:-SG-BLENDOP-DEFAULT 0)
	(:BLENDOP-ADD 1)
	(:BLENDOP-SUBTRACT 2)
	(:BLENDOP-REVERSE-SUBTRACT 3)
	(:-SG-BLENDOP-NUM 4)
	(:-SG-BLENDOP-FORCE-U32 2147483647))
(defcenum color-mask
	(:-SG-COLORMASK-DEFAULT 0)
	(:COLORMASK-NONE 16)
	(:COLORMASK-R 1)
	(:COLORMASK-G 2)
	(:COLORMASK-RG 3)
	(:COLORMASK-B 4)
	(:COLORMASK-RB 5)
	(:COLORMASK-GB 6)
	(:COLORMASK-RGB 7)
	(:COLORMASK-A 8)
	(:COLORMASK-RA 9)
	(:COLORMASK-GA 10)
	(:COLORMASK-RGA 11)
	(:COLORMASK-BA 12)
	(:COLORMASK-RBA 13)
	(:COLORMASK-GBA 14)
	(:COLORMASK-RGBA 15)
	(:-SG-COLORMASK-FORCE-U32 2147483647))
(defcenum load-action
	(:-SG-LOADACTION-DEFAULT 0)
	(:LOADACTION-CLEAR 1)
	(:LOADACTION-LOAD 2)
	(:LOADACTION-DONTCARE 3)
	(:-SG-LOADACTION-FORCE-U32 2147483647))
(defcenum store-action
	(:-SG-STOREACTION-DEFAULT 0)
	(:STOREACTION-STORE 1)
	(:STOREACTION-DONTCARE 2)
	(:-SG-STOREACTION-FORCE-U32 2147483647))
(defcenum log-item
	(:LOGITEM-OK 0)
	(:LOGITEM-MALLOC-FAILED 1)
	(:LOGITEM-GL-TEXTURE-FORMAT-NOT-SUPPORTED 2)
	(:LOGITEM-GL-3D-TEXTURES-NOT-SUPPORTED 3)
	(:LOGITEM-GL-ARRAY-TEXTURES-NOT-SUPPORTED 4)
	(:LOGITEM-GL-SHADER-COMPILATION-FAILED 5)
	(:LOGITEM-GL-SHADER-LINKING-FAILED 6)
	(:LOGITEM-GL-VERTEX-ATTRIBUTE-NOT-FOUND-IN-SHADER 7)
	(:LOGITEM-GL-TEXTURE-NAME-NOT-FOUND-IN-SHADER 8)
	(:LOGITEM-GL-FRAMEBUFFER-STATUS-UNDEFINED 9)
	(:LOGITEM-GL-FRAMEBUFFER-STATUS-INCOMPLETE-ATTACHMENT 10)
	(:LOGITEM-GL-FRAMEBUFFER-STATUS-INCOMPLETE-MISSING-ATTACHMENT 11)
	(:LOGITEM-GL-FRAMEBUFFER-STATUS-UNSUPPORTED 12)
	(:LOGITEM-GL-FRAMEBUFFER-STATUS-INCOMPLETE-MULTISAMPLE 13)
	(:LOGITEM-GL-FRAMEBUFFER-STATUS-UNKNOWN 14)
	(:LOGITEM-D3D11-CREATE-BUFFER-FAILED 15)
	(:LOGITEM-D3D11-CREATE-BUFFER-SRV-FAILED 16)
	(:LOGITEM-D3D11-CREATE-DEPTH-TEXTURE-UNSUPPORTED-PIXEL-FORMAT 17)
	(:LOGITEM-D3D11-CREATE-DEPTH-TEXTURE-FAILED 18)
	(:LOGITEM-D3D11-CREATE-2D-TEXTURE-UNSUPPORTED-PIXEL-FORMAT 19)
	(:LOGITEM-D3D11-CREATE-2D-TEXTURE-FAILED 20)
	(:LOGITEM-D3D11-CREATE-2D-SRV-FAILED 21)
	(:LOGITEM-D3D11-CREATE-3D-TEXTURE-UNSUPPORTED-PIXEL-FORMAT 22)
	(:LOGITEM-D3D11-CREATE-3D-TEXTURE-FAILED 23)
	(:LOGITEM-D3D11-CREATE-3D-SRV-FAILED 24)
	(:LOGITEM-D3D11-CREATE-MSAA-TEXTURE-FAILED 25)
	(:LOGITEM-D3D11-CREATE-SAMPLER-STATE-FAILED 26)
	(:LOGITEM-D3D11-LOAD-D3DCOMPILER-47-DLL-FAILED 27)
	(:LOGITEM-D3D11-SHADER-COMPILATION-FAILED 28)
	(:LOGITEM-D3D11-SHADER-COMPILATION-OUTPUT 29)
	(:LOGITEM-D3D11-CREATE-CONSTANT-BUFFER-FAILED 30)
	(:LOGITEM-D3D11-CREATE-INPUT-LAYOUT-FAILED 31)
	(:LOGITEM-D3D11-CREATE-RASTERIZER-STATE-FAILED 32)
	(:LOGITEM-D3D11-CREATE-DEPTH-STENCIL-STATE-FAILED 33)
	(:LOGITEM-D3D11-CREATE-BLEND-STATE-FAILED 34)
	(:LOGITEM-D3D11-CREATE-RTV-FAILED 35)
	(:LOGITEM-D3D11-CREATE-DSV-FAILED 36)
	(:LOGITEM-D3D11-MAP-FOR-UPDATE-BUFFER-FAILED 37)
	(:LOGITEM-D3D11-MAP-FOR-APPEND-BUFFER-FAILED 38)
	(:LOGITEM-D3D11-MAP-FOR-UPDATE-IMAGE-FAILED 39)
	(:LOGITEM-METAL-CREATE-BUFFER-FAILED 40)
	(:LOGITEM-METAL-TEXTURE-FORMAT-NOT-SUPPORTED 41)
	(:LOGITEM-METAL-CREATE-TEXTURE-FAILED 42)
	(:LOGITEM-METAL-CREATE-SAMPLER-FAILED 43)
	(:LOGITEM-METAL-SHADER-COMPILATION-FAILED 44)
	(:LOGITEM-METAL-SHADER-CREATION-FAILED 45)
	(:LOGITEM-METAL-SHADER-COMPILATION-OUTPUT 46)
	(:LOGITEM-METAL-VERTEX-SHADER-ENTRY-NOT-FOUND 47)
	(:LOGITEM-METAL-FRAGMENT-SHADER-ENTRY-NOT-FOUND 48)
	(:LOGITEM-METAL-CREATE-RPS-FAILED 49)
	(:LOGITEM-METAL-CREATE-RPS-OUTPUT 50)
	(:LOGITEM-METAL-CREATE-DSS-FAILED 51)
	(:LOGITEM-WGPU-BINDGROUPS-POOL-EXHAUSTED 52)
	(:LOGITEM-WGPU-BINDGROUPSCACHE-SIZE-GREATER-ONE 53)
	(:LOGITEM-WGPU-BINDGROUPSCACHE-SIZE-POW2 54)
	(:LOGITEM-WGPU-CREATEBINDGROUP-FAILED 55)
	(:LOGITEM-WGPU-CREATE-BUFFER-FAILED 56)
	(:LOGITEM-WGPU-CREATE-TEXTURE-FAILED 57)
	(:LOGITEM-WGPU-CREATE-TEXTURE-VIEW-FAILED 58)
	(:LOGITEM-WGPU-CREATE-SAMPLER-FAILED 59)
	(:LOGITEM-WGPU-CREATE-SHADER-MODULE-FAILED 60)
	(:LOGITEM-WGPU-SHADER-TOO-MANY-IMAGES 61)
	(:LOGITEM-WGPU-SHADER-TOO-MANY-SAMPLERS 62)
	(:LOGITEM-WGPU-SHADER-TOO-MANY-STORAGEBUFFERS 63)
	(:LOGITEM-WGPU-SHADER-CREATE-BINDGROUP-LAYOUT-FAILED 64)
	(:LOGITEM-WGPU-CREATE-PIPELINE-LAYOUT-FAILED 65)
	(:LOGITEM-WGPU-CREATE-RENDER-PIPELINE-FAILED 66)
	(:LOGITEM-WGPU-ATTACHMENTS-CREATE-TEXTURE-VIEW-FAILED 67)
	(:LOGITEM-IDENTICAL-COMMIT-LISTENER 68)
	(:LOGITEM-COMMIT-LISTENER-ARRAY-FULL 69)
	(:LOGITEM-TRACE-HOOKS-NOT-ENABLED 70)
	(:LOGITEM-DEALLOC-BUFFER-INVALID-STATE 71)
	(:LOGITEM-DEALLOC-IMAGE-INVALID-STATE 72)
	(:LOGITEM-DEALLOC-SAMPLER-INVALID-STATE 73)
	(:LOGITEM-DEALLOC-SHADER-INVALID-STATE 74)
	(:LOGITEM-DEALLOC-PIPELINE-INVALID-STATE 75)
	(:LOGITEM-DEALLOC-ATTACHMENTS-INVALID-STATE 76)
	(:LOGITEM-INIT-BUFFER-INVALID-STATE 77)
	(:LOGITEM-INIT-IMAGE-INVALID-STATE 78)
	(:LOGITEM-INIT-SAMPLER-INVALID-STATE 79)
	(:LOGITEM-INIT-SHADER-INVALID-STATE 80)
	(:LOGITEM-INIT-PIPELINE-INVALID-STATE 81)
	(:LOGITEM-INIT-ATTACHMENTS-INVALID-STATE 82)
	(:LOGITEM-UNINIT-BUFFER-INVALID-STATE 83)
	(:LOGITEM-UNINIT-IMAGE-INVALID-STATE 84)
	(:LOGITEM-UNINIT-SAMPLER-INVALID-STATE 85)
	(:LOGITEM-UNINIT-SHADER-INVALID-STATE 86)
	(:LOGITEM-UNINIT-PIPELINE-INVALID-STATE 87)
	(:LOGITEM-UNINIT-ATTACHMENTS-INVALID-STATE 88)
	(:LOGITEM-FAIL-BUFFER-INVALID-STATE 89)
	(:LOGITEM-FAIL-IMAGE-INVALID-STATE 90)
	(:LOGITEM-FAIL-SAMPLER-INVALID-STATE 91)
	(:LOGITEM-FAIL-SHADER-INVALID-STATE 92)
	(:LOGITEM-FAIL-PIPELINE-INVALID-STATE 93)
	(:LOGITEM-FAIL-ATTACHMENTS-INVALID-STATE 94)
	(:LOGITEM-BUFFER-POOL-EXHAUSTED 95)
	(:LOGITEM-IMAGE-POOL-EXHAUSTED 96)
	(:LOGITEM-SAMPLER-POOL-EXHAUSTED 97)
	(:LOGITEM-SHADER-POOL-EXHAUSTED 98)
	(:LOGITEM-PIPELINE-POOL-EXHAUSTED 99)
	(:LOGITEM-PASS-POOL-EXHAUSTED 100)
	(:LOGITEM-BEGINPASS-ATTACHMENT-INVALID 101)
	(:LOGITEM-DRAW-WITHOUT-BINDINGS 102)
	(:LOGITEM-VALIDATE-BUFFERDESC-CANARY 103)
	(:LOGITEM-VALIDATE-BUFFERDESC-SIZE 104)
	(:LOGITEM-VALIDATE-BUFFERDESC-DATA 105)
	(:LOGITEM-VALIDATE-BUFFERDESC-DATA-SIZE 106)
	(:LOGITEM-VALIDATE-BUFFERDESC-NO-DATA 107)
	(:LOGITEM-VALIDATE-BUFFERDESC-STORAGEBUFFER-SUPPORTED 108)
	(:LOGITEM-VALIDATE-BUFFERDESC-STORAGEBUFFER-SIZE-MULTIPLE-4 109)
	(:LOGITEM-VALIDATE-IMAGEDATA-NODATA 110)
	(:LOGITEM-VALIDATE-IMAGEDATA-DATA-SIZE 111)
	(:LOGITEM-VALIDATE-IMAGEDESC-CANARY 112)
	(:LOGITEM-VALIDATE-IMAGEDESC-WIDTH 113)
	(:LOGITEM-VALIDATE-IMAGEDESC-HEIGHT 114)
	(:LOGITEM-VALIDATE-IMAGEDESC-RT-PIXELFORMAT 115)
	(:LOGITEM-VALIDATE-IMAGEDESC-NONRT-PIXELFORMAT 116)
	(:LOGITEM-VALIDATE-IMAGEDESC-MSAA-BUT-NO-RT 117)
	(:LOGITEM-VALIDATE-IMAGEDESC-NO-MSAA-RT-SUPPORT 118)
	(:LOGITEM-VALIDATE-IMAGEDESC-MSAA-NUM-MIPMAPS 119)
	(:LOGITEM-VALIDATE-IMAGEDESC-MSAA-3D-IMAGE 120)
	(:LOGITEM-VALIDATE-IMAGEDESC-DEPTH-3D-IMAGE 121)
	(:LOGITEM-VALIDATE-IMAGEDESC-RT-IMMUTABLE 122)
	(:LOGITEM-VALIDATE-IMAGEDESC-RT-NO-DATA 123)
	(:LOGITEM-VALIDATE-IMAGEDESC-INJECTED-NO-DATA 124)
	(:LOGITEM-VALIDATE-IMAGEDESC-DYNAMIC-NO-DATA 125)
	(:LOGITEM-VALIDATE-IMAGEDESC-COMPRESSED-IMMUTABLE 126)
	(:LOGITEM-VALIDATE-SAMPLERDESC-CANARY 127)
	(:LOGITEM-VALIDATE-SAMPLERDESC-MINFILTER-NONE 128)
	(:LOGITEM-VALIDATE-SAMPLERDESC-MAGFILTER-NONE 129)
	(:LOGITEM-VALIDATE-SAMPLERDESC-ANISTROPIC-REQUIRES-LINEAR-FILTERING 130)
	(:LOGITEM-VALIDATE-SHADERDESC-CANARY 131)
	(:LOGITEM-VALIDATE-SHADERDESC-SOURCE 132)
	(:LOGITEM-VALIDATE-SHADERDESC-BYTECODE 133)
	(:LOGITEM-VALIDATE-SHADERDESC-SOURCE-OR-BYTECODE 134)
	(:LOGITEM-VALIDATE-SHADERDESC-NO-BYTECODE-SIZE 135)
	(:LOGITEM-VALIDATE-SHADERDESC-NO-CONT-UBS 136)
	(:LOGITEM-VALIDATE-SHADERDESC-NO-CONT-UB-MEMBERS 137)
	(:LOGITEM-VALIDATE-SHADERDESC-NO-UB-MEMBERS 138)
	(:LOGITEM-VALIDATE-SHADERDESC-UB-MEMBER-NAME 139)
	(:LOGITEM-VALIDATE-SHADERDESC-UB-SIZE-MISMATCH 140)
	(:LOGITEM-VALIDATE-SHADERDESC-UB-ARRAY-COUNT 141)
	(:LOGITEM-VALIDATE-SHADERDESC-UB-STD140-ARRAY-TYPE 142)
	(:LOGITEM-VALIDATE-SHADERDESC-NO-CONT-STORAGEBUFFERS 143)
	(:LOGITEM-VALIDATE-SHADERDESC-STORAGEBUFFER-READONLY 144)
	(:LOGITEM-VALIDATE-SHADERDESC-NO-CONT-IMAGES 145)
	(:LOGITEM-VALIDATE-SHADERDESC-NO-CONT-SAMPLERS 146)
	(:LOGITEM-VALIDATE-SHADERDESC-IMAGE-SAMPLER-PAIR-IMAGE-SLOT-OUT-OF-RANGE 147)
	(:LOGITEM-VALIDATE-SHADERDESC-IMAGE-SAMPLER-PAIR-SAMPLER-SLOT-OUT-OF-RANGE 148)
	(:LOGITEM-VALIDATE-SHADERDESC-IMAGE-SAMPLER-PAIR-NAME-REQUIRED-FOR-GL 149)
	(:LOGITEM-VALIDATE-SHADERDESC-IMAGE-SAMPLER-PAIR-HAS-NAME-BUT-NOT-USED 150)
	(:LOGITEM-VALIDATE-SHADERDESC-IMAGE-SAMPLER-PAIR-HAS-IMAGE-BUT-NOT-USED 151)
	(:LOGITEM-VALIDATE-SHADERDESC-IMAGE-SAMPLER-PAIR-HAS-SAMPLER-BUT-NOT-USED 152)
	(:LOGITEM-VALIDATE-SHADERDESC-NONFILTERING-SAMPLER-REQUIRED 153)
	(:LOGITEM-VALIDATE-SHADERDESC-COMPARISON-SAMPLER-REQUIRED 154)
	(:LOGITEM-VALIDATE-SHADERDESC-IMAGE-NOT-REFERENCED-BY-IMAGE-SAMPLER-PAIRS 155)
	(:LOGITEM-VALIDATE-SHADERDESC-SAMPLER-NOT-REFERENCED-BY-IMAGE-SAMPLER-PAIRS 156)
	(:LOGITEM-VALIDATE-SHADERDESC-NO-CONT-IMAGE-SAMPLER-PAIRS 157)
	(:LOGITEM-VALIDATE-SHADERDESC-ATTR-STRING-TOO-LONG 158)
	(:LOGITEM-VALIDATE-PIPELINEDESC-CANARY 159)
	(:LOGITEM-VALIDATE-PIPELINEDESC-SHADER 160)
	(:LOGITEM-VALIDATE-PIPELINEDESC-NO-CONT-ATTRS 161)
	(:LOGITEM-VALIDATE-PIPELINEDESC-LAYOUT-STRIDE4 162)
	(:LOGITEM-VALIDATE-PIPELINEDESC-ATTR-SEMANTICS 163)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-CANARY 164)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-NO-ATTACHMENTS 165)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-NO-CONT-COLOR-ATTS 166)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-IMAGE 167)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-MIPLEVEL 168)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-FACE 169)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-LAYER 170)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-SLICE 171)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-IMAGE-NO-RT 172)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-COLOR-INV-PIXELFORMAT 173)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-DEPTH-INV-PIXELFORMAT 174)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-IMAGE-SIZES 175)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-IMAGE-SAMPLE-COUNTS 176)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-RESOLVE-COLOR-IMAGE-MSAA 177)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-RESOLVE-IMAGE 178)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-RESOLVE-SAMPLE-COUNT 179)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-RESOLVE-MIPLEVEL 180)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-RESOLVE-FACE 181)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-RESOLVE-LAYER 182)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-RESOLVE-SLICE 183)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-RESOLVE-IMAGE-NO-RT 184)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-RESOLVE-IMAGE-SIZES 185)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-RESOLVE-IMAGE-FORMAT 186)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-DEPTH-IMAGE 187)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-DEPTH-MIPLEVEL 188)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-DEPTH-FACE 189)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-DEPTH-LAYER 190)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-DEPTH-SLICE 191)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-DEPTH-IMAGE-NO-RT 192)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-DEPTH-IMAGE-SIZES 193)
	(:LOGITEM-VALIDATE-ATTACHMENTSDESC-DEPTH-IMAGE-SAMPLE-COUNT 194)
	(:LOGITEM-VALIDATE-BEGINPASS-CANARY 195)
	(:LOGITEM-VALIDATE-BEGINPASS-ATTACHMENTS-EXISTS 196)
	(:LOGITEM-VALIDATE-BEGINPASS-ATTACHMENTS-VALID 197)
	(:LOGITEM-VALIDATE-BEGINPASS-COLOR-ATTACHMENT-IMAGE 198)
	(:LOGITEM-VALIDATE-BEGINPASS-RESOLVE-ATTACHMENT-IMAGE 199)
	(:LOGITEM-VALIDATE-BEGINPASS-DEPTHSTENCIL-ATTACHMENT-IMAGE 200)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-EXPECT-WIDTH 201)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-EXPECT-WIDTH-NOTSET 202)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-EXPECT-HEIGHT 203)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-EXPECT-HEIGHT-NOTSET 204)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-EXPECT-SAMPLECOUNT 205)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-EXPECT-SAMPLECOUNT-NOTSET 206)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-EXPECT-COLORFORMAT 207)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-EXPECT-COLORFORMAT-NOTSET 208)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-EXPECT-DEPTHFORMAT-NOTSET 209)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-METAL-EXPECT-CURRENTDRAWABLE 210)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-METAL-EXPECT-CURRENTDRAWABLE-NOTSET 211)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-METAL-EXPECT-DEPTHSTENCILTEXTURE 212)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-METAL-EXPECT-DEPTHSTENCILTEXTURE-NOTSET 213)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-METAL-EXPECT-MSAACOLORTEXTURE 214)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-METAL-EXPECT-MSAACOLORTEXTURE-NOTSET 215)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-D3D11-EXPECT-RENDERVIEW 216)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-D3D11-EXPECT-RENDERVIEW-NOTSET 217)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-D3D11-EXPECT-RESOLVEVIEW 218)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-D3D11-EXPECT-RESOLVEVIEW-NOTSET 219)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-D3D11-EXPECT-DEPTHSTENCILVIEW 220)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-D3D11-EXPECT-DEPTHSTENCILVIEW-NOTSET 221)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-WGPU-EXPECT-RENDERVIEW 222)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-WGPU-EXPECT-RENDERVIEW-NOTSET 223)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-WGPU-EXPECT-RESOLVEVIEW 224)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-WGPU-EXPECT-RESOLVEVIEW-NOTSET 225)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-WGPU-EXPECT-DEPTHSTENCILVIEW 226)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-WGPU-EXPECT-DEPTHSTENCILVIEW-NOTSET 227)
	(:LOGITEM-VALIDATE-BEGINPASS-SWAPCHAIN-GL-EXPECT-FRAMEBUFFER-NOTSET 228)
	(:LOGITEM-VALIDATE-APIP-PIPELINE-VALID-ID 229)
	(:LOGITEM-VALIDATE-APIP-PIPELINE-EXISTS 230)
	(:LOGITEM-VALIDATE-APIP-PIPELINE-VALID 231)
	(:LOGITEM-VALIDATE-APIP-SHADER-EXISTS 232)
	(:LOGITEM-VALIDATE-APIP-SHADER-VALID 233)
	(:LOGITEM-VALIDATE-APIP-CURPASS-ATTACHMENTS-EXISTS 234)
	(:LOGITEM-VALIDATE-APIP-CURPASS-ATTACHMENTS-VALID 235)
	(:LOGITEM-VALIDATE-APIP-ATT-COUNT 236)
	(:LOGITEM-VALIDATE-APIP-COLOR-FORMAT 237)
	(:LOGITEM-VALIDATE-APIP-DEPTH-FORMAT 238)
	(:LOGITEM-VALIDATE-APIP-SAMPLE-COUNT 239)
	(:LOGITEM-VALIDATE-ABND-PIPELINE 240)
	(:LOGITEM-VALIDATE-ABND-PIPELINE-EXISTS 241)
	(:LOGITEM-VALIDATE-ABND-PIPELINE-VALID 242)
	(:LOGITEM-VALIDATE-ABND-VBS 243)
	(:LOGITEM-VALIDATE-ABND-VB-EXISTS 244)
	(:LOGITEM-VALIDATE-ABND-VB-TYPE 245)
	(:LOGITEM-VALIDATE-ABND-VB-OVERFLOW 246)
	(:LOGITEM-VALIDATE-ABND-NO-IB 247)
	(:LOGITEM-VALIDATE-ABND-IB 248)
	(:LOGITEM-VALIDATE-ABND-IB-EXISTS 249)
	(:LOGITEM-VALIDATE-ABND-IB-TYPE 250)
	(:LOGITEM-VALIDATE-ABND-IB-OVERFLOW 251)
	(:LOGITEM-VALIDATE-ABND-VS-EXPECTED-IMAGE-BINDING 252)
	(:LOGITEM-VALIDATE-ABND-VS-IMG-EXISTS 253)
	(:LOGITEM-VALIDATE-ABND-VS-IMAGE-TYPE-MISMATCH 254)
	(:LOGITEM-VALIDATE-ABND-VS-IMAGE-MSAA 255)
	(:LOGITEM-VALIDATE-ABND-VS-EXPECTED-FILTERABLE-IMAGE 256)
	(:LOGITEM-VALIDATE-ABND-VS-EXPECTED-DEPTH-IMAGE 257)
	(:LOGITEM-VALIDATE-ABND-VS-UNEXPECTED-IMAGE-BINDING 258)
	(:LOGITEM-VALIDATE-ABND-VS-EXPECTED-SAMPLER-BINDING 259)
	(:LOGITEM-VALIDATE-ABND-VS-UNEXPECTED-SAMPLER-COMPARE-NEVER 260)
	(:LOGITEM-VALIDATE-ABND-VS-EXPECTED-SAMPLER-COMPARE-NEVER 261)
	(:LOGITEM-VALIDATE-ABND-VS-EXPECTED-NONFILTERING-SAMPLER 262)
	(:LOGITEM-VALIDATE-ABND-VS-UNEXPECTED-SAMPLER-BINDING 263)
	(:LOGITEM-VALIDATE-ABND-VS-SMP-EXISTS 264)
	(:LOGITEM-VALIDATE-ABND-VS-EXPECTED-STORAGEBUFFER-BINDING 265)
	(:LOGITEM-VALIDATE-ABND-VS-STORAGEBUFFER-EXISTS 266)
	(:LOGITEM-VALIDATE-ABND-VS-STORAGEBUFFER-BINDING-BUFFERTYPE 267)
	(:LOGITEM-VALIDATE-ABND-VS-UNEXPECTED-STORAGEBUFFER-BINDING 268)
	(:LOGITEM-VALIDATE-ABND-FS-EXPECTED-IMAGE-BINDING 269)
	(:LOGITEM-VALIDATE-ABND-FS-IMG-EXISTS 270)
	(:LOGITEM-VALIDATE-ABND-FS-IMAGE-TYPE-MISMATCH 271)
	(:LOGITEM-VALIDATE-ABND-FS-IMAGE-MSAA 272)
	(:LOGITEM-VALIDATE-ABND-FS-EXPECTED-FILTERABLE-IMAGE 273)
	(:LOGITEM-VALIDATE-ABND-FS-EXPECTED-DEPTH-IMAGE 274)
	(:LOGITEM-VALIDATE-ABND-FS-UNEXPECTED-IMAGE-BINDING 275)
	(:LOGITEM-VALIDATE-ABND-FS-EXPECTED-SAMPLER-BINDING 276)
	(:LOGITEM-VALIDATE-ABND-FS-UNEXPECTED-SAMPLER-COMPARE-NEVER 277)
	(:LOGITEM-VALIDATE-ABND-FS-EXPECTED-SAMPLER-COMPARE-NEVER 278)
	(:LOGITEM-VALIDATE-ABND-FS-EXPECTED-NONFILTERING-SAMPLER 279)
	(:LOGITEM-VALIDATE-ABND-FS-UNEXPECTED-SAMPLER-BINDING 280)
	(:LOGITEM-VALIDATE-ABND-FS-SMP-EXISTS 281)
	(:LOGITEM-VALIDATE-ABND-FS-EXPECTED-STORAGEBUFFER-BINDING 282)
	(:LOGITEM-VALIDATE-ABND-FS-STORAGEBUFFER-EXISTS 283)
	(:LOGITEM-VALIDATE-ABND-FS-STORAGEBUFFER-BINDING-BUFFERTYPE 284)
	(:LOGITEM-VALIDATE-ABND-FS-UNEXPECTED-STORAGEBUFFER-BINDING 285)
	(:LOGITEM-VALIDATE-AUB-NO-PIPELINE 286)
	(:LOGITEM-VALIDATE-AUB-NO-UB-AT-SLOT 287)
	(:LOGITEM-VALIDATE-AUB-SIZE 288)
	(:LOGITEM-VALIDATE-UPDATEBUF-USAGE 289)
	(:LOGITEM-VALIDATE-UPDATEBUF-SIZE 290)
	(:LOGITEM-VALIDATE-UPDATEBUF-ONCE 291)
	(:LOGITEM-VALIDATE-UPDATEBUF-APPEND 292)
	(:LOGITEM-VALIDATE-APPENDBUF-USAGE 293)
	(:LOGITEM-VALIDATE-APPENDBUF-SIZE 294)
	(:LOGITEM-VALIDATE-APPENDBUF-UPDATE 295)
	(:LOGITEM-VALIDATE-UPDIMG-USAGE 296)
	(:LOGITEM-VALIDATE-UPDIMG-ONCE 297)
	(:LOGITEM-VALIDATION-FAILED 298))
(defcstruct (buffer :size 32)
	(id :offset 0 :size 32 :uint32))
(defcstruct (image :size 32)
	(id :offset 0 :size 32 :uint32))
(defcstruct (sampler :size 32)
	(id :offset 0 :size 32 :uint32))
(defcstruct (shader :size 32)
	(id :offset 0 :size 32 :uint32))
(defcstruct (pipeline :size 32)
	(id :offset 0 :size 32 :uint32))
(defcstruct (attachments :size 32)
	(id :offset 0 :size 32 :uint32))
(defcstruct (range :size 128)
	(ptr :offset 0 :size 64 (:pointer :void))
	(size :offset 64 :size 64 size_t))
(defcstruct (color :size 128)
	(r :offset 0 :size 32 :float)
	(g :offset 32 :size 32 :float)
	(b :offset 64 :size 32 :float)
	(a :offset 96 :size 32 :float))
(defcstruct (pixelformat-info :size 96)
	(sample :offset 0 :size 8 :boolean)
	(filter :offset 8 :size 8 :boolean)
	(render :offset 16 :size 8 :boolean)
	(blend :offset 24 :size 8 :boolean)
	(msaa :offset 32 :size 8 :boolean)
	(depth :offset 40 :size 8 :boolean)
	(compressed :offset 48 :size 8 :boolean)
	(bytes-per-pixel :offset 64 :size 32 :int))
(defcstruct (features :size 40)
	(origin-top-left :offset 0 :size 8 :boolean)
	(image-clamp-to-border :offset 8 :size 8 :boolean)
	(mrt-independent-blend-state :offset 16 :size 8 :boolean)
	(mrt-independent-write-mask :offset 24 :size 8 :boolean)
	(storage-buffer :offset 32 :size 8 :boolean))
(defcstruct (limits :size 256)
	(max-image-size-2d :offset 0 :size 32 :int)
	(max-image-size-cube :offset 32 :size 32 :int)
	(max-image-size-3d :offset 64 :size 32 :int)
	(max-image-size-array :offset 96 :size 32 :int)
	(max-image-array-layers :offset 128 :size 32 :int)
	(max-vertex-attrs :offset 160 :size 32 :int)
	(gl-max-vertex-uniform-components :offset 192 :size 32 :int)
	(gl-max-combined-texture-image-units :offset 224 :size 32 :int))
(defcstruct (color-attachment-action :size 192)
	(load-action :offset 0 :size 32 (:struct load-action))
	(store-action :offset 32 :size 32 (:struct store-action))
	(clear-value :offset 64 :size 128 (:struct color)))
(defcstruct (depth-attachment-action :size 96)
	(load-action :offset 0 :size 32 (:struct load-action))
	(store-action :offset 32 :size 32 (:struct store-action))
	(clear-value :offset 64 :size 32 :float))
(defcstruct (stencil-attachment-action :size 96)
	(load-action :offset 0 :size 32 (:struct load-action))
	(store-action :offset 32 :size 32 (:struct store-action))
	(clear-value :offset 64 :size 8 uint8_t))
(defcstruct (pass-action :size 960)
	(colors :offset 0 :size 768 (:array sg_color_attachment_action :count 4))
	(depth :offset 768 :size 96 (:struct depth-attachment-action))
	(stencil :offset 864 :size 96 (:struct stencil-attachment-action)))
(defcstruct (metal-swapchain :size 192)
	(current-drawable :offset 0 :size 64 (:pointer :void))
	(depth-stencil-texture :offset 64 :size 64 (:pointer :void))
	(msaa-color-texture :offset 128 :size 64 (:pointer :void)))
(defcstruct (d3d11-swapchain :size 192)
	(render-view :offset 0 :size 64 (:pointer :void))
	(resolve-view :offset 64 :size 64 (:pointer :void))
	(depth-stencil-view :offset 128 :size 64 (:pointer :void)))
(defcstruct (wgpu-swapchain :size 192)
	(render-view :offset 0 :size 64 (:pointer :void))
	(resolve-view :offset 64 :size 64 (:pointer :void))
	(depth-stencil-view :offset 128 :size 64 (:pointer :void)))
(defcstruct (gl-swapchain :size 32)
	(framebuffer :offset 0 :size 32 :uint32))
(defcstruct (swapchain :size 832)
	(width :offset 0 :size 32 :int)
	(height :offset 32 :size 32 :int)
	(sample-count :offset 64 :size 32 :int)
	(color-format :offset 96 :size 32 (:struct pixel-format))
	(depth-format :offset 128 :size 32 (:struct pixel-format))
	(metal :offset 192 :size 192 (:struct metal-swapchain))
	(d3d11 :offset 384 :size 192 (:struct d3d11-swapchain))
	(wgpu :offset 576 :size 192 (:struct wgpu-swapchain))
	(gl :offset 768 :size 32 (:struct gl-swapchain)))
(defcstruct (pass :size 1984)
	(-start-canary :offset 0 :size 32 :uint32)
	(action :offset 32 :size 960 (:struct pass-action))
	(attachments :offset 992 :size 32 (:struct attachments))
	(swapchain :offset 1024 :size 832 (:struct swapchain))
	(label :offset 1856 :size 64 (:pointer :char))
	(-end-canary :offset 1920 :size 32 :uint32))
(defcstruct (stage-bindings :size 896)
	(images :offset 0 :size 384 (:array sg_image :count 12))
	(samplers :offset 384 :size 256 (:array sg_sampler :count 8))
	(storage-buffers :offset 640 :size 256 (:array sg_buffer :count 8)))
(defcstruct (bindings :size 2432)
	(-start-canary :offset 0 :size 32 :uint32)
	(vertex-buffers :offset 32 :size 256 (:array sg_buffer :count 8))
	(vertex-buffer-offsets :offset 288 :size 256 (:array :int :count 8))
	(index-buffer :offset 544 :size 32 (:struct buffer))
	(index-buffer-offset :offset 576 :size 32 :int)
	(vs :offset 608 :size 896 (:struct stage-bindings))
	(fs :offset 1504 :size 896 (:struct stage-bindings))
	(-end-canary :offset 2400 :size 32 :uint32))
(defcstruct (buffer-desc :size 768)
	(-start-canary :offset 0 :size 32 :uint32)
	(size :offset 64 :size 64 size_t)
	(type :offset 128 :size 32 (:struct buffer-type))
	(usage :offset 160 :size 32 (:struct usage))
	(data :offset 192 :size 128 (:struct range))
	(label :offset 320 :size 64 (:pointer :char))
	(gl-buffers :offset 384 :size 64 (:array uint32_t :count 2))
	(mtl-buffers :offset 448 :size 128 (:array :pointer :count 2))
	(d3d11-buffer :offset 576 :size 64 (:pointer :void))
	(wgpu-buffer :offset 640 :size 64 (:pointer :void))
	(-end-canary :offset 704 :size 32 :uint32))
(defcstruct (image-data :size 12288)
	(subimage :offset 0 :size 12288 (:array (:array sg_range :count 16) :count 6)))
(defcstruct (image-desc :size 13248)
	(-start-canary :offset 0 :size 32 :uint32)
	(type :offset 32 :size 32 (:struct image-type))
	(render-target :offset 64 :size 8 :boolean)
	(width :offset 96 :size 32 :int)
	(height :offset 128 :size 32 :int)
	(num-slices :offset 160 :size 32 :int)
	(num-mipmaps :offset 192 :size 32 :int)
	(usage :offset 224 :size 32 (:struct usage))
	(pixel-format :offset 256 :size 32 (:struct pixel-format))
	(sample-count :offset 288 :size 32 :int)
	(data :offset 320 :size 12288 (:struct image-data))
	(label :offset 12608 :size 64 (:pointer :char))
	(gl-textures :offset 12672 :size 64 (:array uint32_t :count 2))
	(gl-texture-target :offset 12736 :size 32 :uint32)
	(mtl-textures :offset 12800 :size 128 (:array :pointer :count 2))
	(d3d11-texture :offset 12928 :size 64 (:pointer :void))
	(d3d11-shader-resource-view :offset 12992 :size 64 (:pointer :void))
	(wgpu-texture :offset 13056 :size 64 (:pointer :void))
	(wgpu-texture-view :offset 13120 :size 64 (:pointer :void))
	(-end-canary :offset 13184 :size 32 :uint32))
(defcstruct (sampler-desc :size 768)
	(-start-canary :offset 0 :size 32 :uint32)
	(min-filter :offset 32 :size 32 (:struct filter))
	(mag-filter :offset 64 :size 32 (:struct filter))
	(mipmap-filter :offset 96 :size 32 (:struct filter))
	(wrap-u :offset 128 :size 32 (:struct wrap))
	(wrap-v :offset 160 :size 32 (:struct wrap))
	(wrap-w :offset 192 :size 32 (:struct wrap))
	(min-lod :offset 224 :size 32 :float)
	(max-lod :offset 256 :size 32 :float)
	(border-color :offset 288 :size 32 (:struct border-color))
	(compare :offset 320 :size 32 (:struct compare-func))
	(max-anisotropy :offset 352 :size 32 :uint32)
	(label :offset 384 :size 64 (:pointer :char))
	(gl-sampler :offset 448 :size 32 :uint32)
	(mtl-sampler :offset 512 :size 64 (:pointer :void))
	(d3d11-sampler :offset 576 :size 64 (:pointer :void))
	(wgpu-sampler :offset 640 :size 64 (:pointer :void))
	(-end-canary :offset 704 :size 32 :uint32))
(defcstruct (shader-attr-desc :size 192)
	(name :offset 0 :size 64 (:pointer :char))
	(sem-name :offset 64 :size 64 (:pointer :char))
	(sem-index :offset 128 :size 32 :int))
(defcstruct (shader-uniform-desc :size 128)
	(name :offset 0 :size 64 (:pointer :char))
	(type :offset 64 :size 32 (:struct uniform-type))
	(array-count :offset 96 :size 32 :int))
(defcstruct (shader-uniform-block-desc :size 2176)
	(size :offset 0 :size 64 size_t)
	(layout :offset 64 :size 32 (:struct uniform-layout))
	(uniforms :offset 128 :size 2048 (:array sg_shader_uniform_desc :count 16)))
(defcstruct (shader-storage-buffer-desc :size 16)
	(used :offset 0 :size 8 :boolean)
	(readonly :offset 8 :size 8 :boolean))
(defcstruct (shader-image-desc :size 96)
	(used :offset 0 :size 8 :boolean)
	(multisampled :offset 8 :size 8 :boolean)
	(image-type :offset 32 :size 32 (:struct image-type))
	(sample-type :offset 64 :size 32 (:struct image-sample-type)))
(defcstruct (shader-sampler-desc :size 64)
	(used :offset 0 :size 8 :boolean)
	(sampler-type :offset 32 :size 32 (:struct sampler-type)))
(defcstruct (shader-image-sampler-pair-desc :size 192)
	(used :offset 0 :size 8 :boolean)
	(image-slot :offset 32 :size 32 :int)
	(sampler-slot :offset 64 :size 32 :int)
	(glsl-name :offset 128 :size 64 (:pointer :char)))
(defcstruct (shader-stage-desc :size 13120)
	(source :offset 0 :size 64 (:pointer :char))
	(bytecode :offset 64 :size 128 (:struct range))
	(entry :offset 192 :size 64 (:pointer :char))
	(d3d11-target :offset 256 :size 64 (:pointer :char))
	(uniform-blocks :offset 320 :size 8704 (:array sg_shader_uniform_block_desc :count 4))
	(storage-buffers :offset 9024 :size 128 (:array sg_shader_storage_buffer_desc :count 8))
	(images :offset 9152 :size 1152 (:array sg_shader_image_desc :count 12))
	(samplers :offset 10304 :size 512 (:array sg_shader_sampler_desc :count 8))
	(image-sampler-pairs :offset 10816 :size 2304 (:array sg_shader_image_sampler_pair_desc :count 12)))
(defcstruct (shader-desc :size 29504)
	(-start-canary :offset 0 :size 32 :uint32)
	(attrs :offset 64 :size 3072 (:array sg_shader_attr_desc :count 16))
	(vs :offset 3136 :size 13120 (:struct shader-stage-desc))
	(fs :offset 16256 :size 13120 (:struct shader-stage-desc))
	(label :offset 29376 :size 64 (:pointer :char))
	(-end-canary :offset 29440 :size 32 :uint32))
(defcstruct (vertex-buffer-layout-state :size 96)
	(stride :offset 0 :size 32 :int)
	(step-func :offset 32 :size 32 (:struct vertex-step))
	(step-rate :offset 64 :size 32 :int))
(defcstruct (vertex-attr-state :size 96)
	(buffer-index :offset 0 :size 32 :int)
	(offset :offset 32 :size 32 :int)
	(format :offset 64 :size 32 (:struct vertex-format)))
(defcstruct (vertex-layout-state :size 2304)
	(buffers :offset 0 :size 768 (:array sg_vertex_buffer_layout_state :count 8))
	(attrs :offset 768 :size 1536 (:array sg_vertex_attr_state :count 16)))
(defcstruct (stencil-face-state :size 128)
	(compare :offset 0 :size 32 (:struct compare-func))
	(fail-op :offset 32 :size 32 (:struct stencil-op))
	(depth-fail-op :offset 64 :size 32 (:struct stencil-op))
	(pass-op :offset 96 :size 32 (:struct stencil-op)))
(defcstruct (stencil-state :size 320)
	(enabled :offset 0 :size 8 :boolean)
	(front :offset 32 :size 128 (:struct stencil-face-state))
	(back :offset 160 :size 128 (:struct stencil-face-state))
	(read-mask :offset 288 :size 8 uint8_t)
	(write-mask :offset 296 :size 8 uint8_t)
	(ref :offset 304 :size 8 uint8_t))
(defcstruct (depth-state :size 192)
	(pixel-format :offset 0 :size 32 (:struct pixel-format))
	(compare :offset 32 :size 32 (:struct compare-func))
	(write-enabled :offset 64 :size 8 :boolean)
	(bias :offset 96 :size 32 :float)
	(bias-slope-scale :offset 128 :size 32 :float)
	(bias-clamp :offset 160 :size 32 :float))
(defcstruct (blend-state :size 224)
	(enabled :offset 0 :size 8 :boolean)
	(src-factor-rgb :offset 32 :size 32 (:struct blend-factor))
	(dst-factor-rgb :offset 64 :size 32 (:struct blend-factor))
	(op-rgb :offset 96 :size 32 (:struct blend-op))
	(src-factor-alpha :offset 128 :size 32 (:struct blend-factor))
	(dst-factor-alpha :offset 160 :size 32 (:struct blend-factor))
	(op-alpha :offset 192 :size 32 (:struct blend-op)))
(defcstruct (color-target-state :size 288)
	(pixel-format :offset 0 :size 32 (:struct pixel-format))
	(write-mask :offset 32 :size 32 (:struct color-mask))
	(blend :offset 64 :size 224 (:struct blend-state)))
(defcstruct (pipeline-desc :size 4544)
	(-start-canary :offset 0 :size 32 :uint32)
	(shader :offset 32 :size 32 (:struct shader))
	(layout :offset 64 :size 2304 (:struct vertex-layout-state))
	(depth :offset 2368 :size 192 (:struct depth-state))
	(stencil :offset 2560 :size 320 (:struct stencil-state))
	(color-count :offset 2880 :size 32 :int)
	(colors :offset 2912 :size 1152 (:array sg_color_target_state :count 4))
	(primitive-type :offset 4064 :size 32 (:struct primitive-type))
	(index-type :offset 4096 :size 32 (:struct index-type))
	(cull-mode :offset 4128 :size 32 (:struct cull-mode))
	(face-winding :offset 4160 :size 32 (:struct face-winding))
	(sample-count :offset 4192 :size 32 :int)
	(blend-color :offset 4224 :size 128 (:struct color))
	(alpha-to-coverage-enabled :offset 4352 :size 8 :boolean)
	(label :offset 4416 :size 64 (:pointer :char))
	(-end-canary :offset 4480 :size 32 :uint32))
(defcstruct (attachment-desc :size 96)
	(image :offset 0 :size 32 (:struct image))
	(mip-level :offset 32 :size 32 :int)
	(slice :offset 64 :size 32 :int))
(defcstruct (attachments-desc :size 1024)
	(-start-canary :offset 0 :size 32 :uint32)
	(colors :offset 32 :size 384 (:array sg_attachment_desc :count 4))
	(resolves :offset 416 :size 384 (:array sg_attachment_desc :count 4))
	(depth-stencil :offset 800 :size 96 (:struct attachment-desc))
	(label :offset 896 :size 64 (:pointer :char))
	(-end-canary :offset 960 :size 32 :uint32))
(defcstruct (trace-hooks :size 3712)
	(user-data :offset 0 :size 64 (:pointer :void))
	(reset-state-cache :offset 64 :size 64 (:pointer :void))
	(make-buffer :offset 128 :size 64 (:pointer :void))
	(make-image :offset 192 :size 64 (:pointer :void))
	(make-sampler :offset 256 :size 64 (:pointer :void))
	(make-shader :offset 320 :size 64 (:pointer :void))
	(make-pipeline :offset 384 :size 64 (:pointer :void))
	(make-attachments :offset 448 :size 64 (:pointer :void))
	(destroy-buffer :offset 512 :size 64 (:pointer :void))
	(destroy-image :offset 576 :size 64 (:pointer :void))
	(destroy-sampler :offset 640 :size 64 (:pointer :void))
	(destroy-shader :offset 704 :size 64 (:pointer :void))
	(destroy-pipeline :offset 768 :size 64 (:pointer :void))
	(destroy-attachments :offset 832 :size 64 (:pointer :void))
	(update-buffer :offset 896 :size 64 (:pointer :void))
	(update-image :offset 960 :size 64 (:pointer :void))
	(append-buffer :offset 1024 :size 64 (:pointer :void))
	(begin-pass :offset 1088 :size 64 (:pointer :void))
	(apply-viewport :offset 1152 :size 64 (:pointer :void))
	(apply-scissor-rect :offset 1216 :size 64 (:pointer :void))
	(apply-pipeline :offset 1280 :size 64 (:pointer :void))
	(apply-bindings :offset 1344 :size 64 (:pointer :void))
	(apply-uniforms :offset 1408 :size 64 (:pointer :void))
	(draw :offset 1472 :size 64 (:pointer :void))
	(end-pass :offset 1536 :size 64 (:pointer :void))
	(commit :offset 1600 :size 64 (:pointer :void))
	(alloc-buffer :offset 1664 :size 64 (:pointer :void))
	(alloc-image :offset 1728 :size 64 (:pointer :void))
	(alloc-sampler :offset 1792 :size 64 (:pointer :void))
	(alloc-shader :offset 1856 :size 64 (:pointer :void))
	(alloc-pipeline :offset 1920 :size 64 (:pointer :void))
	(alloc-attachments :offset 1984 :size 64 (:pointer :void))
	(dealloc-buffer :offset 2048 :size 64 (:pointer :void))
	(dealloc-image :offset 2112 :size 64 (:pointer :void))
	(dealloc-sampler :offset 2176 :size 64 (:pointer :void))
	(dealloc-shader :offset 2240 :size 64 (:pointer :void))
	(dealloc-pipeline :offset 2304 :size 64 (:pointer :void))
	(dealloc-attachments :offset 2368 :size 64 (:pointer :void))
	(init-buffer :offset 2432 :size 64 (:pointer :void))
	(init-image :offset 2496 :size 64 (:pointer :void))
	(init-sampler :offset 2560 :size 64 (:pointer :void))
	(init-shader :offset 2624 :size 64 (:pointer :void))
	(init-pipeline :offset 2688 :size 64 (:pointer :void))
	(init-attachments :offset 2752 :size 64 (:pointer :void))
	(uninit-buffer :offset 2816 :size 64 (:pointer :void))
	(uninit-image :offset 2880 :size 64 (:pointer :void))
	(uninit-sampler :offset 2944 :size 64 (:pointer :void))
	(uninit-shader :offset 3008 :size 64 (:pointer :void))
	(uninit-pipeline :offset 3072 :size 64 (:pointer :void))
	(uninit-attachments :offset 3136 :size 64 (:pointer :void))
	(fail-buffer :offset 3200 :size 64 (:pointer :void))
	(fail-image :offset 3264 :size 64 (:pointer :void))
	(fail-sampler :offset 3328 :size 64 (:pointer :void))
	(fail-shader :offset 3392 :size 64 (:pointer :void))
	(fail-pipeline :offset 3456 :size 64 (:pointer :void))
	(fail-attachments :offset 3520 :size 64 (:pointer :void))
	(push-debug-group :offset 3584 :size 64 (:pointer :void))
	(pop-debug-group :offset 3648 :size 64 (:pointer :void)))
(defcstruct (slot-info :size 64)
	(state :offset 0 :size 32 (:struct resource-state))
	(res-id :offset 32 :size 32 :uint32))
(defcstruct (buffer-info :size 256)
	(slot :offset 0 :size 64 (:struct slot-info))
	(update-frame-index :offset 64 :size 32 :uint32)
	(append-frame-index :offset 96 :size 32 :uint32)
	(append-pos :offset 128 :size 32 :int)
	(append-overflow :offset 160 :size 8 :boolean)
	(num-slots :offset 192 :size 32 :int)
	(active-slot :offset 224 :size 32 :int))
(defcstruct (image-info :size 160)
	(slot :offset 0 :size 64 (:struct slot-info))
	(upd-frame-index :offset 64 :size 32 :uint32)
	(num-slots :offset 96 :size 32 :int)
	(active-slot :offset 128 :size 32 :int))
(defcstruct (sampler-info :size 64)
	(slot :offset 0 :size 64 (:struct slot-info)))
(defcstruct (shader-info :size 64)
	(slot :offset 0 :size 64 (:struct slot-info)))
(defcstruct (pipeline-info :size 64)
	(slot :offset 0 :size 64 (:struct slot-info)))
(defcstruct (attachments-info :size 64)
	(slot :offset 0 :size 64 (:struct slot-info)))
(defcstruct (frame-stats-gl :size 352)
	(num-bind-buffer :offset 0 :size 32 :uint32)
	(num-active-texture :offset 32 :size 32 :uint32)
	(num-bind-texture :offset 64 :size 32 :uint32)
	(num-bind-sampler :offset 96 :size 32 :uint32)
	(num-use-program :offset 128 :size 32 :uint32)
	(num-render-state :offset 160 :size 32 :uint32)
	(num-vertex-attrib-pointer :offset 192 :size 32 :uint32)
	(num-vertex-attrib-divisor :offset 224 :size 32 :uint32)
	(num-enable-vertex-attrib-array :offset 256 :size 32 :uint32)
	(num-disable-vertex-attrib-array :offset 288 :size 32 :uint32)
	(num-uniform :offset 320 :size 32 :uint32))
(defcstruct (frame-stats-d3d11-pass :size 128)
	(num-om-set-render-targets :offset 0 :size 32 :uint32)
	(num-clear-render-target-view :offset 32 :size 32 :uint32)
	(num-clear-depth-stencil-view :offset 64 :size 32 :uint32)
	(num-resolve-subresource :offset 96 :size 32 :uint32))
(defcstruct (frame-stats-d3d11-pipeline :size 288)
	(num-rs-set-state :offset 0 :size 32 :uint32)
	(num-om-set-depth-stencil-state :offset 32 :size 32 :uint32)
	(num-om-set-blend-state :offset 64 :size 32 :uint32)
	(num-ia-set-primitive-topology :offset 96 :size 32 :uint32)
	(num-ia-set-input-layout :offset 128 :size 32 :uint32)
	(num-vs-set-shader :offset 160 :size 32 :uint32)
	(num-vs-set-constant-buffers :offset 192 :size 32 :uint32)
	(num-ps-set-shader :offset 224 :size 32 :uint32)
	(num-ps-set-constant-buffers :offset 256 :size 32 :uint32))
(defcstruct (frame-stats-d3d11-bindings :size 192)
	(num-ia-set-vertex-buffers :offset 0 :size 32 :uint32)
	(num-ia-set-index-buffer :offset 32 :size 32 :uint32)
	(num-vs-set-shader-resources :offset 64 :size 32 :uint32)
	(num-ps-set-shader-resources :offset 96 :size 32 :uint32)
	(num-vs-set-samplers :offset 128 :size 32 :uint32)
	(num-ps-set-samplers :offset 160 :size 32 :uint32))
(defcstruct (frame-stats-d3d11-uniforms :size 32)
	(num-update-subresource :offset 0 :size 32 :uint32))
(defcstruct (frame-stats-d3d11-draw :size 128)
	(num-draw-indexed-instanced :offset 0 :size 32 :uint32)
	(num-draw-indexed :offset 32 :size 32 :uint32)
	(num-draw-instanced :offset 64 :size 32 :uint32)
	(num-draw :offset 96 :size 32 :uint32))
(defcstruct (frame-stats-d3d11 :size 832)
	(pass :offset 0 :size 128 (:struct frame-stats-d3d11-pass))
	(pipeline :offset 128 :size 288 (:struct frame-stats-d3d11-pipeline))
	(bindings :offset 416 :size 192 (:struct frame-stats-d3d11-bindings))
	(uniforms :offset 608 :size 32 (:struct frame-stats-d3d11-uniforms))
	(draw :offset 640 :size 128 (:struct frame-stats-d3d11-draw))
	(num-map :offset 768 :size 32 :uint32)
	(num-unmap :offset 800 :size 32 :uint32))
(defcstruct (frame-stats-metal-idpool :size 96)
	(num-added :offset 0 :size 32 :uint32)
	(num-released :offset 32 :size 32 :uint32)
	(num-garbage-collected :offset 64 :size 32 :uint32))
(defcstruct (frame-stats-metal-pipeline :size 224)
	(num-set-blend-color :offset 0 :size 32 :uint32)
	(num-set-cull-mode :offset 32 :size 32 :uint32)
	(num-set-front-facing-winding :offset 64 :size 32 :uint32)
	(num-set-stencil-reference-value :offset 96 :size 32 :uint32)
	(num-set-depth-bias :offset 128 :size 32 :uint32)
	(num-set-render-pipeline-state :offset 160 :size 32 :uint32)
	(num-set-depth-stencil-state :offset 192 :size 32 :uint32))
(defcstruct (frame-stats-metal-bindings :size 192)
	(num-set-vertex-buffer :offset 0 :size 32 :uint32)
	(num-set-vertex-texture :offset 32 :size 32 :uint32)
	(num-set-vertex-sampler-state :offset 64 :size 32 :uint32)
	(num-set-fragment-buffer :offset 96 :size 32 :uint32)
	(num-set-fragment-texture :offset 128 :size 32 :uint32)
	(num-set-fragment-sampler-state :offset 160 :size 32 :uint32))
(defcstruct (frame-stats-metal-uniforms :size 64)
	(num-set-vertex-buffer-offset :offset 0 :size 32 :uint32)
	(num-set-fragment-buffer-offset :offset 32 :size 32 :uint32))
(defcstruct (frame-stats-metal :size 576)
	(idpool :offset 0 :size 96 (:struct frame-stats-metal-idpool))
	(pipeline :offset 96 :size 224 (:struct frame-stats-metal-pipeline))
	(bindings :offset 320 :size 192 (:struct frame-stats-metal-bindings))
	(uniforms :offset 512 :size 64 (:struct frame-stats-metal-uniforms)))
(defcstruct (frame-stats-wgpu-uniforms :size 64)
	(num-set-bindgroup :offset 0 :size 32 :uint32)
	(size-write-buffer :offset 32 :size 32 :uint32))
(defcstruct (frame-stats-wgpu-bindings :size 384)
	(num-set-vertex-buffer :offset 0 :size 32 :uint32)
	(num-skip-redundant-vertex-buffer :offset 32 :size 32 :uint32)
	(num-set-index-buffer :offset 64 :size 32 :uint32)
	(num-skip-redundant-index-buffer :offset 96 :size 32 :uint32)
	(num-create-bindgroup :offset 128 :size 32 :uint32)
	(num-discard-bindgroup :offset 160 :size 32 :uint32)
	(num-set-bindgroup :offset 192 :size 32 :uint32)
	(num-skip-redundant-bindgroup :offset 224 :size 32 :uint32)
	(num-bindgroup-cache-hits :offset 256 :size 32 :uint32)
	(num-bindgroup-cache-misses :offset 288 :size 32 :uint32)
	(num-bindgroup-cache-collisions :offset 320 :size 32 :uint32)
	(num-bindgroup-cache-hash-vs-key-mismatch :offset 352 :size 32 :uint32))
(defcstruct (frame-stats-wgpu :size 448)
	(uniforms :offset 0 :size 64 (:struct frame-stats-wgpu-uniforms))
	(bindings :offset 64 :size 384 (:struct frame-stats-wgpu-bindings)))
(defcstruct (frame-stats :size 2688)
	(frame-index :offset 0 :size 32 :uint32)
	(num-passes :offset 32 :size 32 :uint32)
	(num-apply-viewport :offset 64 :size 32 :uint32)
	(num-apply-scissor-rect :offset 96 :size 32 :uint32)
	(num-apply-pipeline :offset 128 :size 32 :uint32)
	(num-apply-bindings :offset 160 :size 32 :uint32)
	(num-apply-uniforms :offset 192 :size 32 :uint32)
	(num-draw :offset 224 :size 32 :uint32)
	(num-update-buffer :offset 256 :size 32 :uint32)
	(num-append-buffer :offset 288 :size 32 :uint32)
	(num-update-image :offset 320 :size 32 :uint32)
	(size-apply-uniforms :offset 352 :size 32 :uint32)
	(size-update-buffer :offset 384 :size 32 :uint32)
	(size-append-buffer :offset 416 :size 32 :uint32)
	(size-update-image :offset 448 :size 32 :uint32)
	(gl :offset 480 :size 352 (:struct frame-stats-gl))
	(d3d11 :offset 832 :size 832 (:struct frame-stats-d3d11))
	(metal :offset 1664 :size 576 (:struct frame-stats-metal))
	(wgpu :offset 2240 :size 448 (:struct frame-stats-wgpu)))
(defcstruct (environment-defaults :size 96)
	(color-format :offset 0 :size 32 (:struct pixel-format))
	(depth-format :offset 32 :size 32 (:struct pixel-format))
	(sample-count :offset 64 :size 32 :int))
(defcstruct (metal-environment :size 64)
	(device :offset 0 :size 64 (:pointer :void)))
(defcstruct (d3d11-environment :size 128)
	(device :offset 0 :size 64 (:pointer :void))
	(device-context :offset 64 :size 64 (:pointer :void)))
(defcstruct (wgpu-environment :size 64)
	(device :offset 0 :size 64 (:pointer :void)))
(defcstruct (environment :size 384)
	(defaults :offset 0 :size 96 (:struct environment-defaults))
	(metal :offset 128 :size 64 (:struct metal-environment))
	(d3d11 :offset 192 :size 128 (:struct d3d11-environment))
	(wgpu :offset 320 :size 64 (:struct wgpu-environment)))
(defcstruct (commit-listener :size 128)
	(func :offset 0 :size 64 (:pointer :void))
	(user-data :offset 64 :size 64 (:pointer :void)))
(defcstruct (allocator :size 192)
	(alloc-fn :offset 0 :size 64 (:pointer :void))
	(free-fn :offset 64 :size 64 (:pointer :void))
	(user-data :offset 128 :size 64 (:pointer :void)))
(defcstruct (logger :size 128)
	(func :offset 0 :size 64 (:pointer :void))
	(user-data :offset 64 :size 64 (:pointer :void)))
(defcstruct (desc :size 1152)
	(-start-canary :offset 0 :size 32 :uint32)
	(buffer-pool-size :offset 32 :size 32 :int)
	(image-pool-size :offset 64 :size 32 :int)
	(sampler-pool-size :offset 96 :size 32 :int)
	(shader-pool-size :offset 128 :size 32 :int)
	(pipeline-pool-size :offset 160 :size 32 :int)
	(attachments-pool-size :offset 192 :size 32 :int)
	(uniform-buffer-size :offset 224 :size 32 :int)
	(max-commit-listeners :offset 256 :size 32 :int)
	(disable-validation :offset 288 :size 8 :boolean)
	(mtl-force-managed-storage-mode :offset 296 :size 8 :boolean)
	(mtl-use-command-buffer-with-retained-references :offset 304 :size 8 :boolean)
	(wgpu-disable-bindgroups-cache :offset 312 :size 8 :boolean)
	(wgpu-bindgroups-cache-size :offset 320 :size 32 :int)
	(allocator :offset 384 :size 192 (:struct allocator))
	(logger :offset 576 :size 128 (:struct logger))
	(environment :offset 704 :size 384 (:struct environment))
	(-end-canary :offset 1088 :size 32 :uint32))
(defcstruct (d3d11-buffer-info :size 64)
	(buf :offset 0 :size 64 (:pointer :void)))
(defcstruct (d3d11-image-info :size 256)
	(tex2d :offset 0 :size 64 (:pointer :void))
	(tex3d :offset 64 :size 64 (:pointer :void))
	(res :offset 128 :size 64 (:pointer :void))
	(srv :offset 192 :size 64 (:pointer :void)))
(defcstruct (d3d11-sampler-info :size 64)
	(smp :offset 0 :size 64 (:pointer :void)))
(defcstruct (d3d11-shader-info :size 640)
	(vs-cbufs :offset 0 :size 256 (:array :pointer :count 4))
	(fs-cbufs :offset 256 :size 256 (:array :pointer :count 4))
	(vs :offset 512 :size 64 (:pointer :void))
	(fs :offset 576 :size 64 (:pointer :void)))
(defcstruct (d3d11-pipeline-info :size 256)
	(il :offset 0 :size 64 (:pointer :void))
	(rs :offset 64 :size 64 (:pointer :void))
	(dss :offset 128 :size 64 (:pointer :void))
	(bs :offset 192 :size 64 (:pointer :void)))
(defcstruct (d3d11-attachments-info :size 576)
	(color-rtv :offset 0 :size 256 (:array :pointer :count 4))
	(resolve-rtv :offset 256 :size 256 (:array :pointer :count 4))
	(dsv :offset 512 :size 64 (:pointer :void)))
(defcstruct (mtl-buffer-info :size 192)
	(buf :offset 0 :size 128 (:array :pointer :count 2))
	(active-slot :offset 128 :size 32 :int))
(defcstruct (mtl-image-info :size 192)
	(tex :offset 0 :size 128 (:array :pointer :count 2))
	(active-slot :offset 128 :size 32 :int))
(defcstruct (mtl-sampler-info :size 64)
	(smp :offset 0 :size 64 (:pointer :void)))
(defcstruct (mtl-shader-info :size 256)
	(vs-lib :offset 0 :size 64 (:pointer :void))
	(fs-lib :offset 64 :size 64 (:pointer :void))
	(vs-func :offset 128 :size 64 (:pointer :void))
	(fs-func :offset 192 :size 64 (:pointer :void)))
(defcstruct (mtl-pipeline-info :size 128)
	(rps :offset 0 :size 64 (:pointer :void))
	(dss :offset 64 :size 64 (:pointer :void)))
(defcstruct (wgpu-buffer-info :size 64)
	(buf :offset 0 :size 64 (:pointer :void)))
(defcstruct (wgpu-image-info :size 128)
	(tex :offset 0 :size 64 (:pointer :void))
	(view :offset 64 :size 64 (:pointer :void)))
(defcstruct (wgpu-sampler-info :size 64)
	(smp :offset 0 :size 64 (:pointer :void)))
(defcstruct (wgpu-shader-info :size 192)
	(vs-mod :offset 0 :size 64 (:pointer :void))
	(fs-mod :offset 64 :size 64 (:pointer :void))
	(bgl :offset 128 :size 64 (:pointer :void)))
(defcstruct (wgpu-pipeline-info :size 64)
	(pip :offset 0 :size 64 (:pointer :void)))
(defcstruct (wgpu-attachments-info :size 576)
	(color-view :offset 0 :size 256 (:array :pointer :count 4))
	(resolve-view :offset 256 :size 256 (:array :pointer :count 4))
	(ds-view :offset 512 :size 64 (:pointer :void)))
(defcstruct (gl-buffer-info :size 96)
	(buf :offset 0 :size 64 (:array uint32_t :count 2))
	(active-slot :offset 64 :size 32 :int))
(defcstruct (gl-image-info :size 160)
	(tex :offset 0 :size 64 (:array uint32_t :count 2))
	(tex-target :offset 64 :size 32 :uint32)
	(msaa-render-buffer :offset 96 :size 32 :uint32)
	(active-slot :offset 128 :size 32 :int))
(defcstruct (gl-sampler-info :size 32)
	(smp :offset 0 :size 32 :uint32))
(defcstruct (gl-shader-info :size 32)
	(prog :offset 0 :size 32 :uint32))
(defcstruct (gl-attachments-info :size 160)
	(framebuffer :offset 0 :size 32 :uint32)
	(msaa-resolve-framebuffer :offset 32 :size 128 (:array uint32_t :count 4)))
(defcfun (setup "sg_setup") :void
	(desc (:pointer (:struct desc))))
(defcfun (shutdown "sg_shutdown") :void)
(defcfun (isvalid "sg_isvalid") :boolean)
(defcfun (reset-state-cache "sg_reset_state_cache") :void)
(defcfun (install-trace-hooks "sg_install_trace_hooks_cl") (:pointer (:struct trace-hooks))
	(trace-hooks (:pointer (:struct trace-hooks))))
(defcfun (push-debug-group "sg_push_debug_group") :void
	(name (:pointer :char)))
(defcfun (pop-debug-group "sg_pop_debug_group") :void)
(defcfun (add-commit-listener "sg_add_commit_listener_cl") :boolean
	(listener (:pointer (:struct commit-listener))))
(defcfun (remove-commit-listener "sg_remove_commit_listener_cl") :boolean
	(listener (:pointer (:struct commit-listener))))
(defcfun (make-buffer "sg_make_buffer_cl") (:pointer (:struct buffer))
	(desc (:pointer (:struct buffer-desc))))
(defcfun (make-image "sg_make_image_cl") (:pointer (:struct image))
	(desc (:pointer (:struct image-desc))))
(defcfun (make-sampler "sg_make_sampler_cl") (:pointer (:struct sampler))
	(desc (:pointer (:struct sampler-desc))))
(defcfun (make-shader "sg_make_shader_cl") (:pointer (:struct shader))
	(desc (:pointer (:struct shader-desc))))
(defcfun (make-pipeline "sg_make_pipeline_cl") (:pointer (:struct pipeline))
	(desc (:pointer (:struct pipeline-desc))))
(defcfun (make-attachments "sg_make_attachments_cl") (:pointer (:struct attachments))
	(desc (:pointer (:struct attachments-desc))))
(defcfun (destroy-buffer "sg_destroy_buffer_cl") :void
	(buf (:pointer (:struct buffer))))
(defcfun (destroy-image "sg_destroy_image_cl") :void
	(img (:pointer (:struct image))))
(defcfun (destroy-sampler "sg_destroy_sampler_cl") :void
	(smp (:pointer (:struct sampler))))
(defcfun (destroy-shader "sg_destroy_shader_cl") :void
	(shd (:pointer (:struct shader))))
(defcfun (destroy-pipeline "sg_destroy_pipeline_cl") :void
	(pip (:pointer (:struct pipeline))))
(defcfun (destroy-attachments "sg_destroy_attachments_cl") :void
	(atts (:pointer (:struct attachments))))
(defcfun (update-buffer "sg_update_buffer_cl") :void
	(buf (:pointer (:struct buffer)))
	(data (:pointer (:struct range))))
(defcfun (update-image "sg_update_image_cl") :void
	(img (:pointer (:struct image)))
	(data (:pointer (:struct image-data))))
(defcfun (append-buffer "sg_append_buffer_cl") :int
	(buf (:pointer (:struct buffer)))
	(data (:pointer (:struct range))))
(defcfun (query-buffer-overflow "sg_query_buffer_overflow_cl") :boolean
	(buf (:pointer (:struct buffer))))
(defcfun (query-buffer-will-overflow "sg_query_buffer_will_overflow_cl") :boolean
	(buf (:pointer (:struct buffer)))
	(size :int))
(defcfun (begin-pass "sg_begin_pass") :void
	(pass (:pointer (:struct pass))))
(defcfun (apply-viewport "sg_apply_viewport") :void
	(x :int)
	(y :int)
	(width :int)
	(height :int)
	(origin-top-left :boolean))
(defcfun (apply-viewportf "sg_apply_viewportf") :void
	(x :float)
	(y :float)
	(width :float)
	(height :float)
	(origin-top-left :boolean))
(defcfun (apply-scissor-rect "sg_apply_scissor_rect") :void
	(x :int)
	(y :int)
	(width :int)
	(height :int)
	(origin-top-left :boolean))
(defcfun (apply-scissor-rectf "sg_apply_scissor_rectf") :void
	(x :float)
	(y :float)
	(width :float)
	(height :float)
	(origin-top-left :boolean))
(defcfun (apply-pipeline "sg_apply_pipeline_cl") :void
	(pip (:pointer (:struct pipeline))))
(defcfun (apply-bindings "sg_apply_bindings") :void
	(bindings (:pointer (:struct bindings))))
(defcfun (apply-uniforms "sg_apply_uniforms_cl") :void
	(stage (:pointer (:struct shader-stage)))
	(ub-index :int)
	(data (:pointer (:struct range))))
(defcfun (draw "sg_draw") :void
	(base-element :int)
	(num-elements :int)
	(num-instances :int))
(defcfun (end-pass "sg_end_pass") :void)
(defcfun (commit "sg_commit") :void)
(defcfun (query-desc "sg_query_desc_cl") (:pointer (:struct desc)))
(defcfun (query-backend "sg_query_backend_cl") (:pointer (:struct backend)))
(defcfun (query-features "sg_query_features_cl") (:pointer (:struct features)))
(defcfun (query-limits "sg_query_limits_cl") (:pointer (:struct limits)))
(defcfun (query-pixelformat "sg_query_pixelformat_cl") (:pointer (:struct pixelformat-info))
	(fmt (:pointer (:struct pixel-format))))
(defcfun (query-row-pitch "sg_query_row_pitch_cl") :int
	(fmt (:pointer (:struct pixel-format)))
	(width :int)
	(row-align-bytes :int))
(defcfun (query-surface-pitch "sg_query_surface_pitch_cl") :int
	(fmt (:pointer (:struct pixel-format)))
	(width :int)
	(height :int)
	(row-align-bytes :int))
(defcfun (query-buffer-state "sg_query_buffer_state_cl") (:pointer (:struct resource-state))
	(buf (:pointer (:struct buffer))))
(defcfun (query-image-state "sg_query_image_state_cl") (:pointer (:struct resource-state))
	(img (:pointer (:struct image))))
(defcfun (query-sampler-state "sg_query_sampler_state_cl") (:pointer (:struct resource-state))
	(smp (:pointer (:struct sampler))))
(defcfun (query-shader-state "sg_query_shader_state_cl") (:pointer (:struct resource-state))
	(shd (:pointer (:struct shader))))
(defcfun (query-pipeline-state "sg_query_pipeline_state_cl") (:pointer (:struct resource-state))
	(pip (:pointer (:struct pipeline))))
(defcfun (query-attachments-state "sg_query_attachments_state_cl") (:pointer (:struct resource-state))
	(atts (:pointer (:struct attachments))))
(defcfun (query-buffer-info "sg_query_buffer_info_cl") (:pointer (:struct buffer-info))
	(buf (:pointer (:struct buffer))))
(defcfun (query-image-info "sg_query_image_info_cl") (:pointer (:struct image-info))
	(img (:pointer (:struct image))))
(defcfun (query-sampler-info "sg_query_sampler_info_cl") (:pointer (:struct sampler-info))
	(smp (:pointer (:struct sampler))))
(defcfun (query-shader-info "sg_query_shader_info_cl") (:pointer (:struct shader-info))
	(shd (:pointer (:struct shader))))
(defcfun (query-pipeline-info "sg_query_pipeline_info_cl") (:pointer (:struct pipeline-info))
	(pip (:pointer (:struct pipeline))))
(defcfun (query-attachments-info "sg_query_attachments_info_cl") (:pointer (:struct attachments-info))
	(atts (:pointer (:struct attachments))))
(defcfun (query-buffer-desc "sg_query_buffer_desc_cl") (:pointer (:struct buffer-desc))
	(buf (:pointer (:struct buffer))))
(defcfun (query-image-desc "sg_query_image_desc_cl") (:pointer (:struct image-desc))
	(img (:pointer (:struct image))))
(defcfun (query-sampler-desc "sg_query_sampler_desc_cl") (:pointer (:struct sampler-desc))
	(smp (:pointer (:struct sampler))))
(defcfun (query-shader-desc "sg_query_shader_desc_cl") (:pointer (:struct shader-desc))
	(shd (:pointer (:struct shader))))
(defcfun (query-pipeline-desc "sg_query_pipeline_desc_cl") (:pointer (:struct pipeline-desc))
	(pip (:pointer (:struct pipeline))))
(defcfun (query-attachments-desc "sg_query_attachments_desc_cl") (:pointer (:struct attachments-desc))
	(atts (:pointer (:struct attachments))))
(defcfun (query-buffer-defaults "sg_query_buffer_defaults_cl") (:pointer (:struct buffer-desc))
	(desc (:pointer (:struct buffer-desc))))
(defcfun (query-image-defaults "sg_query_image_defaults_cl") (:pointer (:struct image-desc))
	(desc (:pointer (:struct image-desc))))
(defcfun (query-sampler-defaults "sg_query_sampler_defaults_cl") (:pointer (:struct sampler-desc))
	(desc (:pointer (:struct sampler-desc))))
(defcfun (query-shader-defaults "sg_query_shader_defaults_cl") (:pointer (:struct shader-desc))
	(desc (:pointer (:struct shader-desc))))
(defcfun (query-pipeline-defaults "sg_query_pipeline_defaults_cl") (:pointer (:struct pipeline-desc))
	(desc (:pointer (:struct pipeline-desc))))
(defcfun (query-attachments-defaults "sg_query_attachments_defaults_cl") (:pointer (:struct attachments-desc))
	(desc (:pointer (:struct attachments-desc))))
(defcfun (alloc-buffer "sg_alloc_buffer_cl") (:pointer (:struct buffer)))
(defcfun (alloc-image "sg_alloc_image_cl") (:pointer (:struct image)))
(defcfun (alloc-sampler "sg_alloc_sampler_cl") (:pointer (:struct sampler)))
(defcfun (alloc-shader "sg_alloc_shader_cl") (:pointer (:struct shader)))
(defcfun (alloc-pipeline "sg_alloc_pipeline_cl") (:pointer (:struct pipeline)))
(defcfun (alloc-attachments "sg_alloc_attachments_cl") (:pointer (:struct attachments)))
(defcfun (dealloc-buffer "sg_dealloc_buffer_cl") :void
	(buf (:pointer (:struct buffer))))
(defcfun (dealloc-image "sg_dealloc_image_cl") :void
	(img (:pointer (:struct image))))
(defcfun (dealloc-sampler "sg_dealloc_sampler_cl") :void
	(smp (:pointer (:struct sampler))))
(defcfun (dealloc-shader "sg_dealloc_shader_cl") :void
	(shd (:pointer (:struct shader))))
(defcfun (dealloc-pipeline "sg_dealloc_pipeline_cl") :void
	(pip (:pointer (:struct pipeline))))
(defcfun (dealloc-attachments "sg_dealloc_attachments_cl") :void
	(attachments (:pointer (:struct attachments))))
(defcfun (init-buffer "sg_init_buffer_cl") :void
	(buf (:pointer (:struct buffer)))
	(desc (:pointer (:struct buffer-desc))))
(defcfun (init-image "sg_init_image_cl") :void
	(img (:pointer (:struct image)))
	(desc (:pointer (:struct image-desc))))
(defcfun (init-sampler "sg_init_sampler_cl") :void
	(smg (:pointer (:struct sampler)))
	(desc (:pointer (:struct sampler-desc))))
(defcfun (init-shader "sg_init_shader_cl") :void
	(shd (:pointer (:struct shader)))
	(desc (:pointer (:struct shader-desc))))
(defcfun (init-pipeline "sg_init_pipeline_cl") :void
	(pip (:pointer (:struct pipeline)))
	(desc (:pointer (:struct pipeline-desc))))
(defcfun (init-attachments "sg_init_attachments_cl") :void
	(attachments (:pointer (:struct attachments)))
	(desc (:pointer (:struct attachments-desc))))
(defcfun (uninit-buffer "sg_uninit_buffer_cl") :void
	(buf (:pointer (:struct buffer))))
(defcfun (uninit-image "sg_uninit_image_cl") :void
	(img (:pointer (:struct image))))
(defcfun (uninit-sampler "sg_uninit_sampler_cl") :void
	(smp (:pointer (:struct sampler))))
(defcfun (uninit-shader "sg_uninit_shader_cl") :void
	(shd (:pointer (:struct shader))))
(defcfun (uninit-pipeline "sg_uninit_pipeline_cl") :void
	(pip (:pointer (:struct pipeline))))
(defcfun (uninit-attachments "sg_uninit_attachments_cl") :void
	(atts (:pointer (:struct attachments))))
(defcfun (fail-buffer "sg_fail_buffer_cl") :void
	(buf (:pointer (:struct buffer))))
(defcfun (fail-image "sg_fail_image_cl") :void
	(img (:pointer (:struct image))))
(defcfun (fail-sampler "sg_fail_sampler_cl") :void
	(smp (:pointer (:struct sampler))))
(defcfun (fail-shader "sg_fail_shader_cl") :void
	(shd (:pointer (:struct shader))))
(defcfun (fail-pipeline "sg_fail_pipeline_cl") :void
	(pip (:pointer (:struct pipeline))))
(defcfun (fail-attachments "sg_fail_attachments_cl") :void
	(atts (:pointer (:struct attachments))))
(defcfun (enable-frame-stats "sg_enable_frame_stats") :void)
(defcfun (disable-frame-stats "sg_disable_frame_stats") :void)
(defcfun (frame-stats-enabled "sg_frame_stats_enabled") :boolean)
(defcfun (query-frame-stats "sg_query_frame_stats_cl") (:pointer (:struct frame-stats)))
(defcfun (d3d11-device "sg_d3d11_device") (:pointer :void))
(defcfun (d3d11-device-context "sg_d3d11_device_context") (:pointer :void))
(defcfun (d3d11-query-buffer-info "sg_d3d11_query_buffer_info_cl") (:pointer (:struct d3d11-buffer-info))
	(buf (:pointer (:struct buffer))))
(defcfun (d3d11-query-image-info "sg_d3d11_query_image_info_cl") (:pointer (:struct d3d11-image-info))
	(img (:pointer (:struct image))))
(defcfun (d3d11-query-sampler-info "sg_d3d11_query_sampler_info_cl") (:pointer (:struct d3d11-sampler-info))
	(smp (:pointer (:struct sampler))))
(defcfun (d3d11-query-shader-info "sg_d3d11_query_shader_info_cl") (:pointer (:struct d3d11-shader-info))
	(shd (:pointer (:struct shader))))
(defcfun (d3d11-query-pipeline-info "sg_d3d11_query_pipeline_info_cl") (:pointer (:struct d3d11-pipeline-info))
	(pip (:pointer (:struct pipeline))))
(defcfun (d3d11-query-attachments-info "sg_d3d11_query_attachments_info_cl") (:pointer (:struct d3d11-attachments-info))
	(atts (:pointer (:struct attachments))))
(defcfun (mtl-device "sg_mtl_device") (:pointer :void))
(defcfun (mtl-render-command-encoder "sg_mtl_render_command_encoder") (:pointer :void))
(defcfun (mtl-query-buffer-info "sg_mtl_query_buffer_info_cl") (:pointer (:struct mtl-buffer-info))
	(buf (:pointer (:struct buffer))))
(defcfun (mtl-query-image-info "sg_mtl_query_image_info_cl") (:pointer (:struct mtl-image-info))
	(img (:pointer (:struct image))))
(defcfun (mtl-query-sampler-info "sg_mtl_query_sampler_info_cl") (:pointer (:struct mtl-sampler-info))
	(smp (:pointer (:struct sampler))))
(defcfun (mtl-query-shader-info "sg_mtl_query_shader_info_cl") (:pointer (:struct mtl-shader-info))
	(shd (:pointer (:struct shader))))
(defcfun (mtl-query-pipeline-info "sg_mtl_query_pipeline_info_cl") (:pointer (:struct mtl-pipeline-info))
	(pip (:pointer (:struct pipeline))))
(defcfun (wgpu-device "sg_wgpu_device") (:pointer :void))
(defcfun (wgpu-queue "sg_wgpu_queue") (:pointer :void))
(defcfun (wgpu-command-encoder "sg_wgpu_command_encoder") (:pointer :void))
(defcfun (wgpu-render-pass-encoder "sg_wgpu_render_pass_encoder") (:pointer :void))
(defcfun (wgpu-query-buffer-info "sg_wgpu_query_buffer_info_cl") (:pointer (:struct wgpu-buffer-info))
	(buf (:pointer (:struct buffer))))
(defcfun (wgpu-query-image-info "sg_wgpu_query_image_info_cl") (:pointer (:struct wgpu-image-info))
	(img (:pointer (:struct image))))
(defcfun (wgpu-query-sampler-info "sg_wgpu_query_sampler_info_cl") (:pointer (:struct wgpu-sampler-info))
	(smp (:pointer (:struct sampler))))
(defcfun (wgpu-query-shader-info "sg_wgpu_query_shader_info_cl") (:pointer (:struct wgpu-shader-info))
	(shd (:pointer (:struct shader))))
(defcfun (wgpu-query-pipeline-info "sg_wgpu_query_pipeline_info_cl") (:pointer (:struct wgpu-pipeline-info))
	(pip (:pointer (:struct pipeline))))
(defcfun (wgpu-query-attachments-info "sg_wgpu_query_attachments_info_cl") (:pointer (:struct wgpu-attachments-info))
	(atts (:pointer (:struct attachments))))
(defcfun (gl-query-buffer-info "sg_gl_query_buffer_info_cl") (:pointer (:struct gl-buffer-info))
	(buf (:pointer (:struct buffer))))
(defcfun (gl-query-image-info "sg_gl_query_image_info_cl") (:pointer (:struct gl-image-info))
	(img (:pointer (:struct image))))
(defcfun (gl-query-sampler-info "sg_gl_query_sampler_info_cl") (:pointer (:struct gl-sampler-info))
	(smp (:pointer (:struct sampler))))
(defcfun (gl-query-shader-info "sg_gl_query_shader_info_cl") (:pointer (:struct gl-shader-info))
	(shd (:pointer (:struct shader))))
(defcfun (gl-query-attachments-info "sg_gl_query_attachments_info_cl") (:pointer (:struct gl-attachments-info))
	(atts (:pointer (:struct attachments))))
