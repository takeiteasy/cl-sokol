;; Generated by gen_cl.py -- part of cl-sokol https://github.com/takeiteasy/cl-sokol
;; The MIT License (MIT)
;; 
;; Copyright (c) 2023 George Watson
;; 
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;; 
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;; 
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


(in-package #:cl-sokol-audio)

(pushnew (asdf:system-relative-pathname :cl-sokol-audio "build/") *foreign-library-directories*)
(define-foreign-library libsokol-audio
  (t (:default "libsokol-audio")))
(unless (foreign-library-loaded-p 'libsokol-audio)
  (use-foreign-library libsokol-audio))

(defcenum log-item
	(:LOGITEM-OK 0)
	(:LOGITEM-MALLOC-FAILED 1)
	(:LOGITEM-ALSA-SND-PCM-OPEN-FAILED 2)
	(:LOGITEM-ALSA-FLOAT-SAMPLES-NOT-SUPPORTED 3)
	(:LOGITEM-ALSA-REQUESTED-BUFFER-SIZE-NOT-SUPPORTED 4)
	(:LOGITEM-ALSA-REQUESTED-CHANNEL-COUNT-NOT-SUPPORTED 5)
	(:LOGITEM-ALSA-SND-PCM-HW-PARAMS-SET-RATE-NEAR-FAILED 6)
	(:LOGITEM-ALSA-SND-PCM-HW-PARAMS-FAILED 7)
	(:LOGITEM-ALSA-PTHREAD-CREATE-FAILED 8)
	(:LOGITEM-WASAPI-CREATE-EVENT-FAILED 9)
	(:LOGITEM-WASAPI-CREATE-DEVICE-ENUMERATOR-FAILED 10)
	(:LOGITEM-WASAPI-GET-DEFAULT-AUDIO-ENDPOINT-FAILED 11)
	(:LOGITEM-WASAPI-DEVICE-ACTIVATE-FAILED 12)
	(:LOGITEM-WASAPI-AUDIO-CLIENT-INITIALIZE-FAILED 13)
	(:LOGITEM-WASAPI-AUDIO-CLIENT-GET-BUFFER-SIZE-FAILED 14)
	(:LOGITEM-WASAPI-AUDIO-CLIENT-GET-SERVICE-FAILED 15)
	(:LOGITEM-WASAPI-AUDIO-CLIENT-SET-EVENT-HANDLE-FAILED 16)
	(:LOGITEM-WASAPI-CREATE-THREAD-FAILED 17)
	(:LOGITEM-AAUDIO-STREAMBUILDER-OPEN-STREAM-FAILED 18)
	(:LOGITEM-AAUDIO-PTHREAD-CREATE-FAILED 19)
	(:LOGITEM-AAUDIO-RESTARTING-STREAM-AFTER-ERROR 20)
	(:LOGITEM-USING-AAUDIO-BACKEND 21)
	(:LOGITEM-AAUDIO-CREATE-STREAMBUILDER-FAILED 22)
	(:LOGITEM-USING-SLES-BACKEND 23)
	(:LOGITEM-SLES-CREATE-ENGINE-FAILED 24)
	(:LOGITEM-SLES-ENGINE-GET-ENGINE-INTERFACE-FAILED 25)
	(:LOGITEM-SLES-CREATE-OUTPUT-MIX-FAILED 26)
	(:LOGITEM-SLES-MIXER-GET-VOLUME-INTERFACE-FAILED 27)
	(:LOGITEM-SLES-ENGINE-CREATE-AUDIO-PLAYER-FAILED 28)
	(:LOGITEM-SLES-PLAYER-GET-PLAY-INTERFACE-FAILED 29)
	(:LOGITEM-SLES-PLAYER-GET-VOLUME-INTERFACE-FAILED 30)
	(:LOGITEM-SLES-PLAYER-GET-BUFFERQUEUE-INTERFACE-FAILED 31)
	(:LOGITEM-COREAUDIO-NEW-OUTPUT-FAILED 32)
	(:LOGITEM-COREAUDIO-ALLOCATE-BUFFER-FAILED 33)
	(:LOGITEM-COREAUDIO-START-FAILED 34)
	(:LOGITEM-BACKEND-BUFFER-SIZE-ISNT-MULTIPLE-OF-PACKET-SIZE 35))
(defcstruct (logger :size 128)
	(func :offset 0 :size 64 (:pointer :void))
	(user-data :offset 64 :size 64 (:pointer :void))
(defcstruct (allocator :size 192)
	(alloc-fn :offset 0 :size 64 (:pointer :void))
	(free-fn :offset 64 :size 64 (:pointer :void))
	(user-data :offset 128 :size 64 (:pointer :void))
(defcstruct (desc :size 704)
	(sample-rate :offset 0 :size 32 :int)
	(num-channels :offset 32 :size 32 :int)
	(buffer-frames :offset 64 :size 32 :int)
	(packet-frames :offset 96 :size 32 :int)
	(num-packets :offset 128 :size 32 :int)
	(stream-cb :offset 192 :size 64 (:pointer :void))
	(stream-userdata-cb :offset 256 :size 64 (:pointer :void))
	(user-data :offset 320 :size 64 (:pointer :void))
	(allocator :offset 384 :size 192 (:struct allocator))
	(logger :offset 576 :size 128 (:struct logger))
(defcfun (setup "saudio_setup") :void
	(desc (:pointer (:struct desc))))
(defcfun (shutdown "saudio_shutdown") :void)
(defcfun (isvalid "saudio_isvalid") :boolean)
(defcfun (userdata "saudio_userdata") (:pointer :void))
(defcfun (query-desc "saudio_query_desc_cl") (:pointer (:struct desc)))
(defcfun (sample-rate "saudio_sample_rate") :int)
(defcfun (buffer-frames "saudio_buffer_frames") :int)
(defcfun (channels "saudio_channels") :int)
(defcfun (suspended "saudio_suspended") :boolean)
(defcfun (expect "saudio_expect") :int)
(defcfun (push "saudio_push") :int
	(frames (:pointer :float))
	(num-frames :int))
