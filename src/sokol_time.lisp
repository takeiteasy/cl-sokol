;; Generated by gen_cl.py -- part of cl-sokol https://github.com/takeiteasy/cl-sokol
;; The MIT License (MIT)
;; 
;; Copyright (c) 2023 George Watson
;; 
;; Permission is hereby granted, free of charge, to any person
;; obtaining a copy of this software and associated documentation
;; files (the "Software"), to deal in the Software without restriction,
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;; 
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;; 
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


(in-package #:cl-sokol-time)

(pushnew (asdf:system-relative-pathname :cl-sokol-time "build/") *foreign-library-directories*)
(define-foreign-library libsokol-time
  (t (:default "libsokol_time")))
(unless (foreign-library-loaded-p 'libsokol-time)
  (use-foreign-library libsokol-time))

(defcfun (setup "stm_setup") :void)
(defcfun (now "stm_now") :uint64)
(defcfun (diff "stm_diff") :uint64
	(new-ticks :uint64)
	(old-ticks :uint64))
(defcfun (since "stm_since") :uint64
	(start-ticks :uint64))
(defcfun (laptime "stm_laptime") :uint64
	(last-time (:pointer uint64_t)))
(defcfun (round-to-common-refresh-rate "stm_round_to_common_refresh_rate") :uint64
	(frame-ticks :uint64))
(defcfun (sec "stm_sec") :double
	(ticks :uint64))
(defcfun (ms "stm_ms") :double
	(ticks :uint64))
(defcfun (us "stm_us") :double
	(ticks :uint64))
(defcfun (ns "stm_ns") :double
	(ticks :uint64))
