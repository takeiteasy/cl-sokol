#pragma once
#include "sokol_all.h"
sg_trace_hooks* sg_install_trace_hooks_cl(sg_trace_hooks* a);
bool sg_add_commit_listener_cl(sg_commit_listener* a);
bool sg_remove_commit_listener_cl(sg_commit_listener* a);
sg_buffer* sg_make_buffer_cl(sg_buffer_desc* a);
sg_image* sg_make_image_cl(sg_image_desc* a);
sg_sampler* sg_make_sampler_cl(sg_sampler_desc* a);
sg_shader* sg_make_shader_cl(sg_shader_desc* a);
sg_pipeline* sg_make_pipeline_cl(sg_pipeline_desc* a);
sg_attachments* sg_make_attachments_cl(sg_attachments_desc* a);
void sg_destroy_buffer_cl(sg_buffer* a);
void sg_destroy_image_cl(sg_image* a);
void sg_destroy_sampler_cl(sg_sampler* a);
void sg_destroy_shader_cl(sg_shader* a);
void sg_destroy_pipeline_cl(sg_pipeline* a);
void sg_destroy_attachments_cl(sg_attachments* a);
void sg_update_buffer_cl(sg_buffer* a, sg_range* b);
void sg_update_image_cl(sg_image* a, sg_image_data* b);
int sg_append_buffer_cl(sg_buffer* a, sg_range* b);
bool sg_query_buffer_overflow_cl(sg_buffer* a);
bool sg_query_buffer_will_overflow_cl(sg_buffer* a, size_t b);
void sg_apply_pipeline_cl(sg_pipeline* a);
void sg_apply_uniforms_cl(sg_shader_stage* a, int b, sg_range* c);
sg_desc* sg_query_desc_cl(void);
sg_backend* sg_query_backend_cl(void);
sg_features* sg_query_features_cl(void);
sg_limits* sg_query_limits_cl(void);
sg_pixelformat_info* sg_query_pixelformat_cl(sg_pixel_format* a);
int sg_query_row_pitch_cl(sg_pixel_format* a, int b, int c);
int sg_query_surface_pitch_cl(sg_pixel_format* a, int b, int c, int d);
sg_resource_state* sg_query_buffer_state_cl(sg_buffer* a);
sg_resource_state* sg_query_image_state_cl(sg_image* a);
sg_resource_state* sg_query_sampler_state_cl(sg_sampler* a);
sg_resource_state* sg_query_shader_state_cl(sg_shader* a);
sg_resource_state* sg_query_pipeline_state_cl(sg_pipeline* a);
sg_resource_state* sg_query_attachments_state_cl(sg_attachments* a);
sg_buffer_info* sg_query_buffer_info_cl(sg_buffer* a);
sg_image_info* sg_query_image_info_cl(sg_image* a);
sg_sampler_info* sg_query_sampler_info_cl(sg_sampler* a);
sg_shader_info* sg_query_shader_info_cl(sg_shader* a);
sg_pipeline_info* sg_query_pipeline_info_cl(sg_pipeline* a);
sg_attachments_info* sg_query_attachments_info_cl(sg_attachments* a);
sg_buffer_desc* sg_query_buffer_desc_cl(sg_buffer* a);
sg_image_desc* sg_query_image_desc_cl(sg_image* a);
sg_sampler_desc* sg_query_sampler_desc_cl(sg_sampler* a);
sg_shader_desc* sg_query_shader_desc_cl(sg_shader* a);
sg_pipeline_desc* sg_query_pipeline_desc_cl(sg_pipeline* a);
sg_attachments_desc* sg_query_attachments_desc_cl(sg_attachments* a);
sg_buffer_desc* sg_query_buffer_defaults_cl(sg_buffer_desc* a);
sg_image_desc* sg_query_image_defaults_cl(sg_image_desc* a);
sg_sampler_desc* sg_query_sampler_defaults_cl(sg_sampler_desc* a);
sg_shader_desc* sg_query_shader_defaults_cl(sg_shader_desc* a);
sg_pipeline_desc* sg_query_pipeline_defaults_cl(sg_pipeline_desc* a);
sg_attachments_desc* sg_query_attachments_defaults_cl(sg_attachments_desc* a);
sg_buffer* sg_alloc_buffer_cl(void);
sg_image* sg_alloc_image_cl(void);
sg_sampler* sg_alloc_sampler_cl(void);
sg_shader* sg_alloc_shader_cl(void);
sg_pipeline* sg_alloc_pipeline_cl(void);
sg_attachments* sg_alloc_attachments_cl(void);
void sg_dealloc_buffer_cl(sg_buffer* a);
void sg_dealloc_image_cl(sg_image* a);
void sg_dealloc_sampler_cl(sg_sampler* a);
void sg_dealloc_shader_cl(sg_shader* a);
void sg_dealloc_pipeline_cl(sg_pipeline* a);
void sg_dealloc_attachments_cl(sg_attachments* a);
void sg_init_buffer_cl(sg_buffer* a, sg_buffer_desc* b);
void sg_init_image_cl(sg_image* a, sg_image_desc* b);
void sg_init_sampler_cl(sg_sampler* a, sg_sampler_desc* b);
void sg_init_shader_cl(sg_shader* a, sg_shader_desc* b);
void sg_init_pipeline_cl(sg_pipeline* a, sg_pipeline_desc* b);
void sg_init_attachments_cl(sg_attachments* a, sg_attachments_desc* b);
void sg_uninit_buffer_cl(sg_buffer* a);
void sg_uninit_image_cl(sg_image* a);
void sg_uninit_sampler_cl(sg_sampler* a);
void sg_uninit_shader_cl(sg_shader* a);
void sg_uninit_pipeline_cl(sg_pipeline* a);
void sg_uninit_attachments_cl(sg_attachments* a);
void sg_fail_buffer_cl(sg_buffer* a);
void sg_fail_image_cl(sg_image* a);
void sg_fail_sampler_cl(sg_sampler* a);
void sg_fail_shader_cl(sg_shader* a);
void sg_fail_pipeline_cl(sg_pipeline* a);
void sg_fail_attachments_cl(sg_attachments* a);
sg_frame_stats* sg_query_frame_stats_cl(void);
sg_d3d11_buffer_info* sg_d3d11_query_buffer_info_cl(sg_buffer* a);
sg_d3d11_image_info* sg_d3d11_query_image_info_cl(sg_image* a);
sg_d3d11_sampler_info* sg_d3d11_query_sampler_info_cl(sg_sampler* a);
sg_d3d11_shader_info* sg_d3d11_query_shader_info_cl(sg_shader* a);
sg_d3d11_pipeline_info* sg_d3d11_query_pipeline_info_cl(sg_pipeline* a);
sg_d3d11_attachments_info* sg_d3d11_query_attachments_info_cl(sg_attachments* a);
sg_mtl_buffer_info* sg_mtl_query_buffer_info_cl(sg_buffer* a);
sg_mtl_image_info* sg_mtl_query_image_info_cl(sg_image* a);
sg_mtl_sampler_info* sg_mtl_query_sampler_info_cl(sg_sampler* a);
sg_mtl_shader_info* sg_mtl_query_shader_info_cl(sg_shader* a);
sg_mtl_pipeline_info* sg_mtl_query_pipeline_info_cl(sg_pipeline* a);
sg_wgpu_buffer_info* sg_wgpu_query_buffer_info_cl(sg_buffer* a);
sg_wgpu_image_info* sg_wgpu_query_image_info_cl(sg_image* a);
sg_wgpu_sampler_info* sg_wgpu_query_sampler_info_cl(sg_sampler* a);
sg_wgpu_shader_info* sg_wgpu_query_shader_info_cl(sg_shader* a);
sg_wgpu_pipeline_info* sg_wgpu_query_pipeline_info_cl(sg_pipeline* a);
sg_wgpu_attachments_info* sg_wgpu_query_attachments_info_cl(sg_attachments* a);
sg_gl_buffer_info* sg_gl_query_buffer_info_cl(sg_buffer* a);
sg_gl_image_info* sg_gl_query_image_info_cl(sg_image* a);
sg_gl_sampler_info* sg_gl_query_sampler_info_cl(sg_sampler* a);
sg_gl_shader_info* sg_gl_query_shader_info_cl(sg_shader* a);
sg_gl_attachments_info* sg_gl_query_attachments_info_cl(sg_attachments* a);
void sapp_set_mouse_cursor_cl(sapp_mouse_cursor* a);
sapp_mouse_cursor* sapp_get_mouse_cursor_cl(void);
sapp_desc* sapp_query_desc_cl(void);
sg_environment* sglue_environment_cl(void);
sg_swapchain* sglue_swapchain_cl(void);
saudio_desc* saudio_query_desc_cl(void);
sfetch_desc_t* sfetch_desc_cl(void);
sfetch_handle_t* sfetch_send_cl(sfetch_request_t* a);
bool sfetch_handle_valid_cl(sfetch_handle_t* a);
void sfetch_bind_buffer_cl(sfetch_handle_t* a, sfetch_range_t* b);
void* sfetch_unbind_buffer_cl(sfetch_handle_t* a);
void sfetch_cancel_cl(sfetch_handle_t* a);
void sfetch_pause_cl(sfetch_handle_t* a);
void sfetch_continue_cl(sfetch_handle_t* a);
